---
title: "16  Visualise Geospatial Point Data"
subtitle: Hands-On Exercise for Week 8
date: last-modified
author: "KB"
editor: visual
execute:
  freeze: auto 
  warning: false
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    code-line-numbers: true
    toc-depth: 4
---

(First Published: Jun 10, 2023)

## 16.1 Learning Outcome

We will learn how to create a proportional symbol map showing the number of wins by Singapore Pools' outlets using an R package called **tmap**.

## 16.2 Getting Started

### 16.2.1 Install and load the required R libraries

Install and load the the required R packages.

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

### 16.2.2 Import the data

The data set use for this hands-on exercise is called *SGPools_svy21*. The data is in csv file format.

Figure below shows the first 15 records of SGPools_svy21.csv. It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches.

We wll use `read_csv()` function of **readr** package to import *SGPools_svy21.csv* into R as a tibble data frame called *sgpools*.

![](images/paste-479D6A5A.png)

```{r}
sgpools <- read_csv("data/aspatial/SGPools_svy21.csv", show_col_types = F)
```

After importing the data file into R, it is important for us to examine if the data file has been imported correctly.

```{r}
list(sgpools) 
```

::: callout-note
## Note

The *sgpools* data in tibble data frame and not the common R data frame.
:::

### **16.2.3 Create a sf data frame from an aspatial data frame**

We convert *sgpools* data frame into a simple feature data frame by using `st_as_sf()` of **sf** packages.

```{r}
sgpools_sf <- st_as_sf(sgpools, 
                       coords = c("XCOORD", "YCOORD"),
                       #crs stands for coordinate reference system
                       crs= 3414)
```

::: callout-tip
## Things to learn from the codes

-   The *coords* argument requires us to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   The *crs* argument required us to provide the coordinates system in epsg format. [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. We can search for other country's epsg code by refering to [epsg.io](https://epsg.io/).
:::

Notice that a new column called geometry has been added into the *sgpools_sf* data frame.

![](images/paste-A4947136.png) We can display the basic information of the newly created *sgpools_sf.*

```{r}
list(sgpools_sf)
```

The output shows that *sgppols_sf* is in point feature class. It's epsg ID is 3414. The bbox provides information of the extend of the geospatial data.

## 16.3 **Draw Proportional Symbol Map**

To create an interactive proportional symbol map in R, the view mode of tmap will be used.

The code churn below will turn on the interactive mode of tmap.

```{r}
tmap_mode("view")
```

### 16.3.1 Plot **an interactive point symbol map**

Let's plot an interactive point symbol map.

```{r}
tm_shape(sgpools_sf)+
tm_bubbles(col = "red",
           size = 1,
           border.col = "black",
           border.lwd = 1)
```

### 16.3.2 **Let's make the points proportional**

To draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The codes below show that the variable *Gp1Gp2Winnings* is assigned to size visual attribute.

```{r}
tm_shape(sgpools_sf)+
tm_bubbles(col = "red",
           size = "Gp1Gp2 Winnings",
           border.col = "black",
           border.lwd = 1)
```

### 16.3.3 Let's give the points a different colour

The proportional symbol map can be further improved by using the colour visual attribute. In the codes below, *`OUTLET TYPE`* variable is used as the colour attribute variable.

```{r}
tm_shape(sgpools_sf)+
tm_bubbles(col = "OUTLET TYPE", 
          size = "Gp1Gp2 Winnings",
          border.col = "black",
          border.lwd = 1)
```

## **16.3.4 I have a twin brothers :)**

An impressive and little-know feature of **tmap**'s view mode is that it also works with faceted plots. The argument `sync in tm_facets()` can be used in this case to produce multiple maps with synchronised zoom and pan settings.

```{r}
tm_shape(sgpools_sf) +
  tm_bubbles(col = "OUTLET TYPE", 
          size = "Gp1Gp2 Winnings",
          border.col = "black",
          border.lwd = 1) +
  tm_facets(by= "OUTLET TYPE",
            nrow = 1,
            # this line set both maps to be in sync
            sync = TRUE)
```

Before we end the session, it is wiser to switch **tmap**'s Viewer back to plot mode by using the code chunk below.

```{r}
tmap_mode("plot")
```

## **16.4 Reference**

### **16.4.1 All about tmap package**

-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)

-   [tmap](https://cran.r-project.org/web/packages/tmap/)

-   [tmap: get started!](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)

-   [tmap: changes in version 2.0](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes-v2.html)

-   [tmap: creating thematic maps in a flexible way (useR!2015)](http://von-tijn.nl/tijn/research/presentations/tmap_user2015.pdf)

-   [Exploring and presenting maps with tmap (useR!2017)](http://von-tijn.nl/tijn/research/presentations/tmap_user2017.pdf)

### **16.4.2 Geospatial data wrangling**

-   [sf: Simple Features for R](https://cran.r-project.org/web/packages/sf/)

-   [Simple Features for R: StandardizedSupport for Spatial Vector Data](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)

-   [Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)

### **16.4.3 Data wrangling**

-   [dplyr](https://dplyr.tidyverse.org/)

-   [Tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)

-   [tidyr: Easily Tidy Data with 'spread()' and 'gather()' Functions](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)

::: {style="text-align: center"}
$**That's$ $all$ $folks!**$
:::
