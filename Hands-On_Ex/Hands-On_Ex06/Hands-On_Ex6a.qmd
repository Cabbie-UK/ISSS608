---
title: "10 Ternary Plot to display composition of 3 variables"
subtitle: Hands-On Exercise for Week 6
date: last-modified
author: "KB"
editor: visual
execute:
  freeze: auto 
  warning: false
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    code-line-numbers: true
    toc-depth: 4
---

(First Published: May 17, 2023)

## 10.1 Learning Outcome

We will learn how to build ternary plot programmatically using R to visualise and analyse population structure of Singapore.

Ternary plots display the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It's display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.

## 10.2 Getting Started

### 10.2.1 Install and load the required r libraries

Install and load the the required R packages. The name and function of the new package that will be used for this exercise is as follow:

-   [**ggtern**](http://www.ggtern.com/), a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.

::: callout-note
## Note on ggtern

Due to some technical issue, ggtern is currently not available for downloading via cran. We need to download ggtern from the archive by using the code chunk below. The latest archive version is 3.4.1.
:::

```{r}
#| eval: false

# Codes below are used to install ggtern from archive
require(devtools)
install_version("ggtern", version = "3.4.1", repos = "http://cran.us.r-project.org")
```

(The codes above to install **ggtern** should only run once)

```{r}
library(plotly)
library(tidyverse)
library(ggtern)
```

### 10.2.2 Import the data

For the purpose of this hands-on exercise, the [Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data) data will be used. The data set is called *respopagsex2000to2018_tidy.csv* and is in csv file format.

```{r}
#Reading the data into R environment
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv", show_col_types = FALSE) 
```

Next, use the `mutate()` function of **dplyr** package to derive three new measures, namely: young, active, and old.

```{r}
#Deriving the young, economy active and old measures
agpop_mutated <- pop_data %>%
  mutate(`Year` = as.character(Year))%>%
  spread(AG, Population) %>%
  mutate(YOUNG = rowSums(.[4:8]))%>%
  mutate(ACTIVE = rowSums(.[9:16]))  %>%
  mutate(OLD = rowSums(.[17:21])) %>%
  mutate(TOTAL = rowSums(.[22:24])) %>%
  filter(Year == 2018)%>%
  filter(TOTAL > 0)
```

## 10.3 Plotting Static Ternary Diagram with **ggtern**

We can use `ggtern()` function of **ggtern** package to create a simple ternary plot.

```{r}
#Building the static ternary plot
ggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point()
```

Let's beautify the plot.

```{r}
#Building the static ternary plot
ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point() +
  labs(title="2018 Population Structure based on Subzones") +
  theme_rgbw()
```

## 10.4 Plotting Intereactive Ternary Diagram with **plotly**

We can create an interactive ternary plot using `plot_ly()` function of **Plotly R**.

üñ±Ô∏èMouse over the dots below to check out the proportion of each population group for the subzones!

```{r}
# reusable function for creating annotation object
label <- function(txt) {
  list(
    text = txt, 
    x = 0.1, y = 1,
    ax = 0, ay = 10,
    xref = "paper", yref = "paper", 
    align = "center",
    font = list(family = "serif", size = 20, color = "white"),
    bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
  )
}

# reusable function for axis formatting
axis <- function(txt) {
  list(
    title = txt, tickformat = ".0%", tickfont = list(size = 10)
  )
}

ternaryAxes <- list(
  aaxis = axis("Young"), 
  baxis = axis("Active"), 
  caxis = axis("Old")
)

# Initiating a plotly visualization 
plot_ly(
  agpop_mutated, 
  a = ~YOUNG, 
  b = ~ACTIVE, 
  c = ~OLD,
  color = I("black"), 
  type = "scatterternary",
  text = ~SZ   # Added this argument to show the name of the subzone
) %>%
  layout(
    annotations = label("2018 Population Structure\nbased on Subzones"), 
    ternary = ternaryAxes
  ) 
  
```

::: {style="text-align: center"}
$**That's$ $all$ $folks!**$
:::
