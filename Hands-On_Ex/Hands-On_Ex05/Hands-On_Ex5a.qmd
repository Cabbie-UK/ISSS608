---
title: "8 Visualise Distribution"
subtitle: Hands-On Exercise for Week 5
date: last-modified
author: "KB"
editor: visual
execute:
  freeze: auto 
  warning: false
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    code-line-numbers: true
    toc-depth: 4
---

(First Published: May 12, 2023)

## 8.1 Learning Outcome

We will learn 2 fairly new techniques to visual distribution, namely:

-   ridgeline plot

-   raincloud plot

## 8.2 Getting Started

### 8.2.1 Install and load the required r libraries

Install and load the the required R packages. The name and function of the new packages that will be used for this exercise are as follow:

-   **ggridges** : a ggplot2 extension specially designed for plotting ridgeline plots

-   **colorspace** : for working with and manipulating colors

```{r}
pacman::p_load(ggdist, ggridges, ggthemes,
               colorspace, tidyverse,plotly)
```

### 8.2.2 Import the data

We will be using the same exam scores data-set that was featured in my [Hands-On Exercise for Week 1](https://boomie-boom-isss608.netlify.app/hands-on_ex/hands-on_ex01/hands-on_ex1#import-the-data "Additional info on the data-set").

```{r}
exam <- read_csv("data/Exam_data.csv", show_col_types = FALSE)
```

8.3 Visualise Distribution with Ridegeline plots

*Ridgeline plot* (sometimes called *Joyplot*) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.

The figure below is a ridgelines plot showing the distribution of English score by class.

![](images/paste-DF3F94D3.png)

::: callout-note
## Note

-   Ridgeline plots can be used when the number of groups to be represented is medium to high, and where a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If we have fewer than 5 groups, using other distribution plots is probably better.

-   It works well especially when there is a clear pattern in the result, like if there is an obvious ranking in groups. In other cases, the groups will tend to overlap each other, leading to a messy plot not providing any insight.
:::

8.3.1 Plotting ridgeline graph: **ggridges** package

There are several ways to plot ridgeline plot with R. In this section, we will learn how to plot ridgeline plot by using [**ggridges**](https://wilkelab.org/ggridges/) package.

**ggridges** package provides two main geoms to plot gridgeline plots, they are: [`geom_ridgeline()`](https://wilkelab.org/ggridges/reference/geom_ridgeline.html) and [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using density curves.

The ridgeline plot below is plotted by using `geom_density_ridges()`

```{r}
ggplot(exam, 
       aes(x = ENGLISH, 
           y = CLASS)) +
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = lighten("#7097BB", .3),
    color = "white"
  ) +
  scale_x_continuous(
    name = "English grades",
    expand = c(0, 0)
    ) +
  scale_y_discrete(
    name = NULL, 
    expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

### 8.3.2 Vary fill colors along the x axis

Sometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary with the x axis. This effect can be achieved by using either [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html) or [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html). Both geoms work just like `geom_ridgeline()` and `geom_density_ridges()`, except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.

```{r}
ggplot(exam, 
       aes(x = ENGLISH, 
           y = CLASS,
           fill = after_stat(x))) +
  geom_density_ridges_gradient(
    scale = 3,
    rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Temp. [F]",
                       option = "C") +
  scale_x_continuous(
    name = "English grades",
    expand = c(0, 0)
  ) +
  scale_y_discrete(
    name = NULL, 
    expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

### 8.3.3 Map the probabilities directly onto colour

Beside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html) that replaces [`stat_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) of ggplot2.

The figure below is plotted by mapping the probabilities calculated by using `stat(ecdf)` which represent the empirical cumulative density function for the distribution of English score.

```{r}
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = 0.5 - abs(0.5-stat(ecdf)))) +
  stat_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE) +
  scale_fill_viridis_c(name = "Tail probability",
                       direction = -1) +
  theme_ridges()
```

::: callout-important
## Important!

The argument `calc_ecdf = TRUE` must be included in the `stat_density_ridges()` `function`.
:::

### 8.3.4 Ridgeline plots with quantile lines

By using [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html), we can colour the ridgeline plot by quantile, via the calculated `stat(quantile)` aesthetic as shown in the figure below.

```{r}
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()
```

Instead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.

```{r}
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = c(0.025, 0.975)
    ) +
  scale_fill_manual(
    name = "Probability",
    values = c("#FF0000A0", "#A0A0A0A0", "#0000FFA0"),
    labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]")
  ) +
  theme_ridges()
```

## 8.4 Visualise Distribution with Raincloud Plot

Raincloud Plot is a data visualisation technique that produces a density and a dot plot symmetrically cupped together along a common pane. It gets the name because the density plot is in the shape of a "raincloud" while the dots represent raindrops 🌧️. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!

In this section, we will learn how to create a raincloud plot to visualise the distribution of English scores by race. It will be created by using functions provided by **ggdist** and ggplot2 packages.

### 8.4.1 Plotting a Half Eye graph

First, we will plot a Half-Eye graph by using [`stat_halfeye()`](https://mjskay.github.io/ggdist/reference/stat_halfeye.html) of **ggdist** package.

This produces a Half Eye visualization, which is contains a half-density and a slab-interval. We remove the slab interval by setting .width = 0 and point_colour = NA.

```{r}
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA)
```

### 8.4.2 Adding the boxplot with `geom_boxplot()`

Next, we will add the second geometry layer using [`geom_boxplot()`](https://r4va.netlify.app/chap09.html) of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.

```{r}
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  # Add'l codes from the previous plot
  geom_boxplot(width = .20,
               outlier.shape = NA)
```

### 8.4.3 Adding the Dot Plots with `stat_dots()`

Next, we will add the third geometry layer using [`stat_dots()`](https://mjskay.github.io/ggdist/reference/stat_dots.html) of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = "left" to indicate we want it on the left-hand side.

```{r}
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  # Add'l codes from the previous plot
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)
```

### 8.4.4 Finishing touch

Lastly, [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html) of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, `theme_economist()` of ggthemes package is used to give the raincloud chart a professional publishing standard look.

```{r}
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 1.5) +
  # Add'l codes from the previous plot
  coord_flip() +
  theme_economist() +
  # Add geom_text layer for displaying median values
  stat_summary(fun = median, geom = "text", aes(label = round(..y.., 1)),
               position = position_nudge(x = 0.15), vjust = -0.5) +
  # Add geom_text layer for displaying mean dot in red
  stat_summary(fun = mean, geom = "point", shape = 16, size = 3, color = "red",
               position = position_nudge(x = 0.0)) +
    stat_summary(fun = mean, geom = "text", aes(label = round(..y.., 0)),
               position = position_nudge(x = 0.15), vjust = 2.5, color = "red") 
```

::: {style="text-align: center"}
$**That's$ $all$ $folks!**$
:::
