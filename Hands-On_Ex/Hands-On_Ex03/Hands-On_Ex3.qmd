---
title: "Interactive Data Visualisation with R"
editor: visual
author: "KB"
execute:
  freeze: auto 
  warning: false
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    code-line-numbers: true
    toc-depth: 4
---

Published: 23-Apr-2023

3.1 Learning Outcome

We will learn to:

-   Create interactive and animated visuals
-   Visualise univariate data with a large number of categories
-   Reshape, process, wrangle and transform the data-set

## 3.2 Getting Started

### 3.2.1 Install and load the required r libraries

Install and load the the required R packages. The name and function of the *new* packages that will be used for this exercise are as follow:

-   [**ggiraph**](https://davidgohel.github.io/ggiraph/)**:** allows interactive graphics to be created using ggplot2

-   [**plotly**](https://plotly.com/r/)**:** creates interactive, web-based graphs using the Plotly.js JavaScript library

-   [**gganimate**](https://gganimate.com/)**:** creates animated graphics, such as line charts, bar charts, and maps, by specifying a series of frames with data and aesthetics that change over time

-   [**DT**](https://rstudio.github.io/DT/)**:** creates interactive tables using the DataTables JavaScript library. It allows data to be displayed in a table with features such as sorting, filtering, pagination, and searching.

```{r}
pacman::p_load(tidyverse, patchwork, 
               ggiraph, plotly,
               gganimate,DT)
```

### 3.2.2 Import the data

We will be using the same exam scores data-set that was featured in my [Hands-On Ex 1](https://boomie-boom-isss608.netlify.app/hands-on_ex/hands-on_ex01/hands-on_ex1#import-the-data "Additional info on the data-set").

```{r}
exam_data <- read_csv('data/Exam_data.csv', show_col_types = FALSE )
```

## 3.3 Interactive Data Visualisation

### 3.3.1 Working with ggiraph package

[**ggiraph**](https://davidgohel.github.io/ggiraph/) is an htmlwidget and a **ggplot2** extension. It allows ggplot graphics to be interactive.

Interactivity is added to ggplot geometries, legends and theme elements, via the following aesthetics:

-   `tooltip`: tooltips are displayed when the mouse is hovered over elements.

-   `onclick`: JavaScript function is executed when elements are clicked.

-   `data_id`: a data id is associated with the graph element. When used within a **Shiny** application, elements associated with an id (`data_id`) can be selected and manipulated on the client and server. The list of selected values will be stored in in a reactive value named `[shiny_id]_selected`.

#### 3.3.1.1 The *tooltip* aesthetic

First, an ggplot object will be created. Next, [`girafe()`](https://davidgohel.github.io/ggiraph/reference/girafe.html) of **ggiraph** will be used to create an interactive Scalable Vector Graphics (SVG) object.

::: callout-note
## What is a SVG?

SVG is an XML-based format that is commonly used for web graphics and interactive visualizations because it allows graphics to be resized without losing quality.
:::

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE, 
    binwidth = 1, 
    method = "histodot") +
  scale_y_continuous(NULL, 
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

👆🏽Interactivity: By hovering the mouse pointer on an data point of interest, the student's ID will be displayed.

Table 1: Comparing ggplot2 and ggiraph codes

| Original ggplot code                        | ggirpah code                   |
|---------------------------------|---------------------------------------|
| ![](images/paste-FD9F5CCC.png){width="298"} | ![](images/paste-2382CE38.png) |

Notice that two steps are involved for the ggirpah code chunk. First, an interactive version of ggplot2 geom (i.e. [`geom_dotplot_interactive()`](https://davidgohel.github.io/ggiraph/reference/geom_dotplot_interactive.html)) is used to create the basic graph. Then, [`girafe()`](https://davidgohel.github.io/ggiraph/reference/girafe.html) is used to generate an SVG object to be displayed on a html page.

**Display more information on tooltip**

Here, we included the student's class in the tooltip.

The first three lines of codes below create a new field called *tooltip*. Text data in the ID and CLASS fields are assigned to the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 8.

```{r}
#| code-fold: show
exam_data$tooltip <- c(paste0(     #<<
  "Name = ", exam_data$ID,         #<<
  "\n Class = ", exam_data$CLASS)) #<<

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), #<<
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```

**Customise Tooltip style**

We can use [`opts_tooltip()`](https://davidgohel.github.io/ggiraph/reference/opts_tooltip.html) of **ggiraph** to customize tooltip rendering by add css declarations.

Check out the 2 sample charts below 👇🏾 ,

::: panel-tabset
## exam_data

```{r}
tooltip_css <- "background-color:white; #<<
font-style:bold; color:black;" #<<

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = ID),                   
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(    #<<
    opts_tooltip(    #<<
      css = tooltip_css)) #<<
)                             
```

## mtcars data

```{r}

dataset <- mtcars
dataset$carname = row.names(mtcars)

gg <- ggplot(
  data = dataset,
  mapping = aes(x = wt, y = qsec, color = disp,
                tooltip = carname, data_id = carname) ) +
  geom_point_interactive() + theme_minimal()

x <- girafe(ggobj = gg)
x <- girafe_options(x,
  opts_tooltip(opacity = .7,
    offx = 20, offy = -10,
    use_fill = TRUE, use_stroke = TRUE,
    delay_mouseout = 1000) )
x
```
:::

**Display statistics on tooltip**

In the following example, a function is used to compute the standard error of the mean math scores. The derived statistics are then displayed in the tooltip.

( 🖱️ over the chart to check out the tooltip!)

```{r}
# Function to derive mean and standard error of mean
tooltip <- function(y, ymax, accuracy = .01) {   #<<
  mean <- scales::number(y, accuracy = accuracy) #<<
  sem <- scales::number(ymax - y, accuracy = accuracy) #<<
  paste("Mean maths scores with std error:\n", mean, "+/-", sem) #<<
} #<<

# Create graph
gg_point <- ggplot(data=exam_data, 
                   aes(x = RACE),
) +
  stat_summary(aes(y = MATHS, 
                   tooltip = after_stat(  #<<  after_stat() function specifies that the tooltip should be calculated after the summary statistics are calculated.
                     tooltip(y, ymax))),  #<<
    fun.data = "mean_se", 
    geom = GeomInteractiveCol,  #<<
    fill = "light blue"
  ) +
  stat_summary(aes(y = MATHS),
    fun.data = mean_se,
    geom = "errorbar", width = 0.2, size = 0.2
  )

# Generate SVG object
girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8*0.618)
```

#### 3.3.1.2 The *onclick* aesthetic

`onclick` argument of ggiraph provides hotlink interactivity on the web. Web document link with a data object will be displayed on the web browser upon mouse click.

```{r}
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(onclick = onclick),              #<<
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618)                                                                                
```

#### 3.3.1.3 The *data_id* aesthetic

We assign the *data_id* argument to CLASS and when we mouse over a particular student in the chart below, the fellow class mates will also be highlighted.

( 🖱️ over the chart to check out the hover effect!)

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(           
    aes(data_id = CLASS),             #<<
    stackgroups = TRUE,               
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618                      
)                                        
```

The default color of *hover_css = "fill:orange;"*

**Customise the hover effect**

CSS codes are used to change the highlighting effect.

( 🖱️ over the chart to check out the new hover effect!)

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(data_id = CLASS),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        #<<
    opts_hover(css = "fill: red;"),  #<<
    opts_hover_inv(css = "opacity:0.2;") #<<
  )                                      #<<  
)                                        
```

**Combine *tooltip* and *data_id* aesthetic**

There are times when we want to combine tooltip and hover effect on an interactive statistical graph. In the following chart, elements associated with a *data_id* (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = CLASS, #<<
        data_id = CLASS),#<<              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: red;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )                                        
)                                        
```

#### 3.3.1.4 Coordinated multiple views with ggiraph

When a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.

In order to build a coordinated multiple views, the following programming strategy will be used:

1.  Appropriate interactive functions of **ggiraph** will be used to create the multiple views.

2.  patchwork function will be used inside `girafe()` function to create the interactive coordinated multiple views.

```{r}

p1 <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = CLASS,
        data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +  
  coord_cartesian(xlim=c(0,100)) + #<<
  scale_y_continuous(NULL,               
                     breaks = NULL)

p2 <- ggplot(data=exam_data, 
       aes(x = ENGLISH)) +
  geom_dotplot_interactive(              
    aes(tooltip = CLASS,
        data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") + 
  coord_cartesian(xlim=c(0,100)) + #<<
  scale_y_continuous(NULL,               
                     breaks = NULL)

girafe(code = print(p1 / p2), #<<
       width_svg = 6,
       height_svg = 6,
       options = list(
         opts_hover(css = "fill: #202020;"),
         opts_hover_inv(css = "opacity:0.2;")
         )
       ) 


```

### 3.3.2 Working with plotly package

-   Plotly's R graphing library create interactive web graphics from **ggplot2** graphs and/or a custom interface to the (MIT-licensed) JavaScript library [**plotly.js**](https://plotly.com/javascript/) inspired by the grammar of graphics.

-   Different from other plotly platform, plot.R is free and open source.

There are two ways to create interactive graph by using plotly, they are:

-   by using *plot_ly()*, and

-   by using *ggplotly()*

#### 3.3.2.1 Create an interactive scatter plot: `plot_ly()` function

The graph below is plotted using *plot_ly()*.

```{r}
plot_ly(data = exam_data, 
             x = ~MATHS, 
             y = ~ENGLISH)
```

In the next plot, the *color* argument is mapped to a qualitative visual variable (i.e. RACE). We can hide/unhide the data points for each race by click on their label in the legend.

```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE) #<<
```

-   *colors* argument is used to change the default colour palette to [ColorBrewe](https://www.r-graph-gallery.com/38-rcolorbrewers-palettes.html)r colour palette.

```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE, 
        colors = "Set1") #<<
```

-   We can also customise our own colour scheme and assign it to the *colors* argument.

```{r}
pal <- c("red", "purple", "blue", "green") #<<

plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE, 
        colors = pal) #<<
```

-   *text* argument is used to change the default tooltip.

```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS,
        text = ~paste("Student ID:", ID,     #<<
                      "<br>Class:", CLASS),  #<<
        color = ~RACE, 
        colors = "Set1")
```

-   *layout* argument is used to update the chart title and axes limit.

```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS,
        text = ~paste("Student ID:", ID,     
                      "<br>Class:", CLASS),  
        color = ~RACE, 
        colors = "Set1") %>%
  layout(title = 'English Score versus Maths Score ', #<<
         xaxis = list(range = c(0, 100)),             #<<
         yaxis = list(range = c(0, 100)))             #<<
```

To learn more about layout, visit this [link](https://plotly.com/r/reference/#Layout_and_layout_style_objects).

#### 3.3.2.2 Create an interactive scatter plot: `ggplotly()` funciton

We just need to include the original ggplot2 graph in the `ggplotly()` function.

```{r}
p <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(dotsize = 1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
ggplotly(p) #<<
```

3.3.2.3 Coordinated Multiple Views with plotly

-   We use `subplot()` of **plotly** package to place two scatterplots side-by-side.

```{r}
p1 <- ggplot(data=exam_data, 
              aes(x = MATHS,
                  y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
subplot(ggplotly(p1),            #<<
        ggplotly(p2))            #<<
```

-   We use the [`highlight_key()`](https://www.rdocumentation.org/packages/plotly/versions/4.9.2/topics/highlight_key) of **plotly** package to coordinate the selection of data points across two scatterplots.

```{r}
d <- highlight_key(exam_data)  #<<

p1 <- ggplot(data=d, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=d, 
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

subplot(ggplotly(p1),
        ggplotly(p2))
```

::: callout-note
## How highlight_key() function works

-   `ey()` simply creates an object of class [crosstalk::SharedData](https://rdrr.io/cran/crosstalk/man/SharedData.html).

-   Visit this [link](https://rstudio.github.io/crosstalk/) to learn more about crosstalk
:::

### 3.3.3 Working with crosstalk package

[Crosstalk](https://rstudio.github.io/crosstalk/) is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).

#### 3.3.3.1 Interactive Data Table: DT package

-   A wrapper of the JavaScript Library [DataTables](https://datatables.net/)

-   Data objects in R can be rendered as HTML tables using the JavaScript library 'DataTables' (typically via R Markdown or Shiny).

```{r}

DT::datatable(exam_data, class= "compact")
```

#### 3.3.3.2 Linked brushing: crosstalk method

Things to note whem implementing coordinated brushing:

-   `highlight()` is a function of **plotly** package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.

-   `bscols()` is a helper function of **crosstalk** package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. **Warning:** This will bring in all of Bootstrap!.

```{r}
d <- highlight_key(exam_data) 

p <- ggplot(d, 
            aes(ENGLISH, 
                MATHS)) + 
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

gg <- highlight(ggplotly(p),        
                "plotly_selected")  

crosstalk::bscols(gg,               
                  DT::datatable(d), 
                  widths = 5)        
```

## 3.4 Animated Data Visualisation

### 3.4.1 Working with gganimate package

[**gganimate**](https://gganimate.com/) extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.

-   `transition_*()` defines how the data should be spread out and how it relates to itself across time.

-   `view_*()` defines how the positional scales should change along the animation.

-   `shadow_*()` defines how data from other points in time should be presented in the given point in time.

-   `enter_*()/exit_*()` defines how new data should appear and how old data should disappear during the course of the animation.

-   `ease_aes()` defines how different aesthetics should be eased during transitions.

We import data from the *Data* worksheet from *GlobalPopulation* Excel workbook for the next plot.

```{r}
#| eval: false
col <- c("Country", "Continent")
globalPop <- read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_each_(funs(factor(.)), col) %>%
  mutate(Year = as.integer(Year))
```

We can use basic ggplot function to create static bubble plot.

```{r}
#| eval: false
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  
  scale_size(range = c(2, 12)) +
  
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') 
```

We next build an animated bubble plot.

```{r}
#| eval: false
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  
  scale_colour_manual(values = country_colors) +
  
  scale_size(range = c(2, 12)) +
  
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) +       
  ease_aes('linear')            
```

## 3.5 Visualising large data-set interactively

Two data-sets are used for the next section of this exercise:

-   *GDP.csv* provides GDP, GDP per capita and GDP PPP data for world countries from 2000 to 2020. The data was extracted from [World Development Indicators Database](https://databank.worldbank.org/source/world-development-indicators) of World Bank.

-   *WorldCountry.csv* provides a list of country names and the continent they belong to extracted from [Statistics Times](https://statisticstimes.com/geography/countries-by-continents.php).

```{r}
#| eval: false
GDP <- read_csv("data/GDP.csv")
WorldCountry <- read_csv("data/WorldCountry.csv")
```

::: callout-note
## Understand the data-set

It is always a good practice to check the data structure and examine data values in RStudio.
:::

### 3.5.1 Data preparation

Before generating the data visualisation, it is important for us to reshape, wrangle and transform the raw data to meet the data visualisation needs. The following data manipulation function will come in handy:

-   [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) of dplyr package is used to convert all values in the 202 field into numeric data type.

-   [`select()`](https://dplyr.tidyverse.org/reference/select.html) of dplyr package is used to extract column 1 to 3 and Values field.

-   [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) of tidyr package is used to split the values in Series Name field into columns.

-   [`left_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html) of dplyr package is used to perform a left-join by using Country Code of GDP_selected and ISO-alpha3 Code of WorldCountry tibble data tables as unique identifier.

```{r}
#| eval: false
GDP_selected <- GDP %>%
  mutate(Values = as.numeric(`2020`)) %>%
  select(1:3, Values) %>%
  pivot_wider(names_from = `Series Name`,
              values_from = `Values`) %>%
  left_join(y=WorldCountry, by = c("Country Code" = "ISO-alpha3 Code"))
```

### 3.5.2 Working with packed bar package

-   **packed bar** is a relatively new data visualisation method introduced by Xan Gregg from JMP.

-   It supports the need of visualising skewed data over hundreds of categories.

-   The idea is to support the [Focus+Context](https://infovis-wiki.net/wiki/Focus-plus-Context) data visualization principle.

-   Visit this [JMP Blog](https://community.jmp.com/t5/JMP-Blog/Introducing-packed-bars-a-new-chart-form/ba-p/39972) to learn more about the design principles of packed bar.

Data preparation for packed bar

```{r}
#| eval: false
GDP_selected <- GDP %>%
  mutate(GDP = as.numeric(`2020`)) %>%
  filter(`Series Name` == "GDP (current US$)") %>%
  select(1:2, GDP) %>%
  na.omit()
```

::: callout-note
## Purpose of na.omit() in the code

-   `na.omit()` is used to exclude rows with missing values. This is because rPackedBar package does not support missing values.
:::

We use `plotly_packed_bar()` of [rPackedBar](https://cran.r-project.org/web/packages/rPackedBar/) package to create an interactive packed bar.

```{r}
#| eval: false
p = plotly_packed_bar(
  input_data = GDP_selected,
  label_column = "Country Name",
  value_column = "GDP",
  number_rows = 10,
  plot_title = "Top 10 countries by GDP, 2020",
  xaxis_label = "GDP (US$)",
  hover_label = "GDP",
  min_label_width = 0.018,
  color_bar_color = "#00aced",
  label_color = "white")
plotly::config(p, displayModeBar = FALSE)
```

-   Read this [Vignettes](https://cran.r-project.org/web/packages/rPackedBar/vignettes/Visualizing_Twitter_Data_with_a_Packed_Barchart.html) and the [user guide](https://cran.r-project.org/web/packages/rPackedBar/rPackedBar.pdf) to learn more about the package.

## 3.6 Reference

### 3.6.1 ggiraph

This [link](https://davidgohel.github.io/ggiraph/) provides online version of the reference guide and several useful articles. Use this [link](https://cran.r-project.org/web/packages/ggiraph/ggiraph.pdf) to download the pdf version of the reference guide.

-   [How to Plot With Ggiraph](https://www.r-bloggers.com/2018/04/how-to-plot-with-ggiraph/)

-   [Interactive map of France with ggiraph](http://rstudio-pubs-static.s3.amazonaws.com/152833_56a4917734204de7b37881d164cf8051.html)\

-   [Custom interactive sunbursts with ggplot in R](https://www.pipinghotdata.com/posts/2021-06-01-custom-interactive-sunbursts-with-ggplot-in-r/)

-   This [link](https://github.com/d-qn/2016_08_02_rioOlympicsAthletes) provides code example on how ggiraph is used to interactive graphs for [Swiss Olympians - the solo specialists](https://www.swissinfo.ch/eng/rio-2016-_swiss-olympiansthe-solo-specialists-/42349156?utm_content=bufferd148b&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer).

### 3.6.2 plotly for R

-   [Getting Started with Plotly in R](https://plotly.com/r/getting-started/)

-   A collection of plotly R graphs are available via this [link](https://plotly.com/r/).

-   Carson Sievert (2020) **Interactive web-based data visualization with R, plotly, and shiny**, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this [link](https://plotly-r.com/)

-   [Plotly R Figure Reference](https://plotly.com/r/reference/index/) provides a comprehensive discussion of each visual representations.

-   [Plotly R Library Fundamentals](https://plotly.com/r/plotly-fundamentals/) is a good place to learn the fundamental features of Plotly's R API.

-   [Getting Started](https://gganimate.com/articles/gganimate.html)

-   Visit this [link](https://rpubs.com/raymondteo/dataviz8) for a very interesting implementation of gganimate by your senior.

-   [Building an animation step-by-step with gganimate](https://www.alexcookson.com/post/2020-10-18-building-an-animation-step-by-step-with-gganimate/).

-   [Creating a composite gif with multiple gganimate panels](https://solarchemist.se/2021/08/02/composite-gif-gganimate/)

### 3.6.3 Packed Bar

[rPackedBar](https://cran.r-project.org/web/packages/rPackedBar/): Packed Bar Charts with 'plotly'

-   [Visualizing Twitter Data with a Packed Barchart](https://cran.r-project.org/web/packages/rPackedBar/vignettes/Visualizing_Twitter_Data_with_a_Packed_Barchart.html)

::: {style="text-align: center"}
$**That's$ $all$ $folks!**$
:::
