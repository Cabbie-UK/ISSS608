---
title: "21 Extract and Visualise Financial Data Information"
subtitle: Hands-On Exercise from Prof Kam's Workshop
date: last-modified
author: "KB"
editor: visual
execute:
  freeze: auto 
  warning: false
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    code-line-numbers: true
    toc-depth: 4
---

(First Published: Sep 19, 2023)

## 21.1 Learning Outcome

We are going to explore the tidymodels approach in financial analysis. By the end of this session, you will learn how to:

-   extract stock price data from an online portal such as Yahoo Finance,

-   wrangle stock price data,

-   perform technical analysis using stock price data,

-   conduct performance analysis

## 21.2 Introducing tidyquant

-   tidyquant integrates the best resources for collecting and analyzing financial data, zoo xts, quantmod, TTR and PerformanceAnalytics, with the tidy data infrastructure of the tidyverse allowing for seamless interaction between each.

-   With tidyquant, we can now perform complete financial analyses using tidyverse framework.

### 21.2.1 Install and load the R Packages into R Environment

```{r}
# Install required packages
pacman::p_load(tidyquant, tidyverse, timetk, knitr)
```

::: callout-note
tidyquant allows easy extract of stock data from Yahoo Finance
:::

### 21.2.2 Extract Financial Data

Data extraction is the starting point of any financial data analysis. `tq_get()` is specially designed for extracting quantitative financial data from the following online portals:

-   Yahoo Finance - Daily stock data

-   FRED - Economic data

-   Quandl - Economic, Energy, & Financial Data API

-   Tiingo - Financial API with sub-daily stock data and crypto-currency

-   Alpha Vantage - Financial API with sub-daily, ForEx, and crypto-currency data Bloomberg - Financial API. Paid account is required.

### 21.2.3 Import Singapore Companies Data

We are interested to analyse the stock prices of six companies in Singapore. The companies and related information are provided in company.csv file.

The codes below are used to important company.csv into R environment.

```{r}
company <- read_csv("data/SGCompany.csv")

company
```

### 21.2.4 Extract stock prices from Yahoo Finance

`tq_get()` is used to get stock prices from Yahoo Finance. The time period for the data was set from 1 January 2022 to 30 June 2023.

```{r}
Stock_daily <- company %>%
  select(Symbol) %>%
  tq_get(get = "stock.prices",from ="2022-01-01",to = "2023-06-30")
```

### 21.2.5 Wrangle stock data

Next, `left_join()` of **dplyr** package is used to append Name and marketcap fields of company tibble data frame into Stock_daily tibble data frame by using *Symbol* as the join field.

```{r}
Stock_data <- Stock_daily %>% 
  left_join(company)
```

## 21.3 Technical Analysis: tidyquant methods

-   Technical analysis is that traders attempt to identify opportunities by looking at statistical trends, such as movements in a stock's price and volume. The core assumption is that all known fundamentals are factored into price, thus there is no need to pay close attention to them.

-   Technical analysts do not attempt to measure a security's intrinsic value. Instead, they use stock charts to identify patterns and trends that suggest what a stock will do in the future.

-   Popular technical analysis signals include simple moving averages (SMA), candlestick, Bollinger bands.

### 21.3.1 Plot Stock Price Line Graph: ggplot methods

`geom_line()` of ggplot2 is used to plot the stock prices.

```{r}
Stock_data %>%
  filter(Name == "DBS Group") %>%
    ggplot(aes(x = date, y = close)) +
    geom_line() +
    labs(title = "DBS Group Holdings Ltd (DBSDF) Daily Stock Price"
    , y = "Closing Price"
    , x = "") + theme_tq()

```

### 21.3.2 Visualise Stock Price with timetk

In the codes below, `plot_time_series()` of **timetk** package is used plot line graphs with trend lines.

```{r}
Stock_data %>%
  group_by(Name) %>% 
  plot_time_series(date, close,
  .facet_ncol = 2, .facet_scales = "free",
  .interactive = TRUE)
```

## 21.4 Technical analysis with Candlestick

A candlestick chart (also called Japanese candlestick chart or K-line) is a style of financial chart used to describe price movements of a security, derivative, or currency.

`geom_candlestick()` of **tidyquan**t is used to plot the stock prices of DBS group.

```{r}
end <- as_date("2023-06-30")
 start <- end - weeks(4)
 Stock_data %>%
 filter(Name == "DBS Group") %>%
 filter(date >= start - days(2 * 15)) %>%
 ggplot(aes(x=date, y=close)) +
 geom_candlestick(aes(open=open,
 high=high,
 low=low,
 close=close)) +
 labs(title = "Daily stock prices of DBS Group", y = "Closing Price", x = 'Date') +
 coord_x_date(xlim = c(start, end)) +
 theme_tq()

```

`facet_wrap()` of **ggplot2** package is used to plot the stock prices of the selected six companies.

```{r}
 end <- as_date("2023-06-30")
 start <- end - weeks(4)
 Stock_data %>%
 filter(date >= start - days(2 * 15)) %>%
 ggplot(aes(x=date, y=close, group = Name )) +
 geom_candlestick(aes(open=open,
 high=high,
 low=low,
 close=close)) +
 labs(title = "Daily stock prices of selected six stocks") +
 coord_x_date(xlim = c(start, end)) +
 facet_wrap(~ Name,
 ncol = 2,
 scales = "free_y") +
 theme_tq()
```

## 21.5 Technical analysis with moving average

In finance, a moving average (MA) is a stock indicator commonly used in technical analysis. The reason for calculating the moving average of a stock is to help smooth out the price data by creating a constantly updated average price. **tidyquant** includes geoms to enable "rapid prototyping" to quickly visualize signals using moving averages and Bollinger bands. The following moving averages are available:

-   Simple moving averages (SMA)

-   Exponential moving averages (EMA)

-   Weighted moving averages (WMA)

-   Double exponential moving averages (DEMA)

-   Zero-lag exponential moving averages (ZLEMA)

-   Volume-weighted moving averages (VWMA) (also known as VWAP)

-   Elastic, volume-weighted moving averages (EVWMA) (also known as MVWAP)

### 21.5.1 Plot the 5-day and 15-day simple moving average

`geom_ma()` of **tidyquant** package is used to overplot two moving average lines on the candlestick chart.

```{r}
# In the code chunk below, of tidyquant package is used to overplot two moving
# average lines on the candlestick chart.
 Stock_data %>%
 filter(Symbol == "D05.SI") %>%
 filter(date >= start - days(2 * 15)) %>%
 ggplot(aes(x = date, y = close)) +
 geom_candlestick(aes(open = open, high = high, low = low, close = close)) +
 geom_ma(ma_fun = SMA, n = 5, linetype = 5, size = 1.25) +
 geom_ma(ma_fun = SMA, n = 15, color = "red", size = 1.25) +
 labs(title = "DBS Group Holdings Ltd Daily Stock Price",
 subtitle = "5 and 15-Day SMA",
 y = "Closing Price", x = "") +
 coord_x_date(xlim = c(end - weeks(5), end)) +
 theme_tq()
```

Note: The moving average functions used are specified `SMA()` in from the **TTR** package.

### 21.5.2 Plot Bollinger Band: tidyquant method

A Bollinger Band is a technical analysis tool defined by a set of trendlines plotted two standard deviations (positively and negatively) away from a simple moving average (SMA) of a security's price, but which can be adjusted to user preferences.

In tidyquant, bollinger band can be plotted by using `geom_bbands()` . Because they use a moving average, the `geom_bbands()` works almost identically to geom_ma. The same seven moving averages are compatible. The main difference is the addition of the standard deviation, sd, argument which is 2 by default, and the high, low and close aesthetics which are required to calculate the bands.

`geom_bbands()` of **tidyquant** package is used to plot bollinger bands on closing stock prices of DBS Group.

```{r}
 Stock_data %>%
 filter(Name == "DBS Group") %>%
 ggplot(aes(x=date, y=close))+
 geom_line(size=0.5)+
 geom_bbands(aes(
 high = high, low = low, close = close),
 ma_fun = SMA, sd = 2, n = 5,
 size = 0.75, color_ma = "royalblue4",
 color_bands = "red1")+
 coord_x_date(xlim = c("2022-01-01",
 "2022-06-30"),
 expand = TRUE)+
 labs(title = "DBS Group Holdings Ltd Daily Stock Price",
 subtitle = "dotted red lines = bollinger bands",
 x = "Date", y ="Close Price") +
 theme(legend.position="none")
```

## 21.6 Performance Analysis with tidyquant

Financial asset (individual stocks, securities, etc) and portfolio (groups of stocks, securities, etc) performance analysis is a deep field with a wide range of theories and methods for analyzing risk versus reward. The **PerformanceAnalytics** package consolidates functions to compute many of the most widely used performance metrics. **tidyquant** integrates this functionality so it can be used at scale using the split, apply, combine framework within the tidyverse. Two primary functions integrate the performance analysis functionality:

-   `tq_performance()` implements the performance analysis functions in a tidy way, enabling scaling analysis using the split, apply, combine framework.

-   `tq_portfolio()` provides a useful tool set for aggregating a group of individual asset returns into one or many portfolios.

## 21.7 Time-based returns analysis with tidyquant

An important concept of performance analysis is based on the statistical properties of returns (not prices). In the codes below, `tq_transmute()` is used to compute the monthly returns of the six stocks

```{r}
 Stock_monthly_returns <- Stock_data %>%
 group_by(Name) %>%
 tq_transmute(select = adjusted,
 mutate_fun = periodReturn,
 period = "monthly",
 type = "arithmetic")
 Stock_monthly_returns
```

## 21.8 Visualise time-based returns

Since the output is in tibble data frame format, we can visualise the returns easily by using appropriate ggplot2 functions.

```{r}
 Stock_monthly_returns %>%
 ggplot(aes(x = date,
 y = monthly.returns,
 fill = Name)) +
 geom_col() + # Use bar graph easier to compare performance
 geom_hline(yintercept = 0,
 color = palette_light()[[1]]) +
 scale_y_continuous(labels = scales::percent) +
 labs(title = "Monthly returns of the six selected stocks",
 subtitle = "",
 y = "Monthly Returns", x = "") +
 facet_wrap(~ Name, ncol = 3, scales = "free_y") +
 theme_tq() +
 scale_fill_tq()
```

## 21.9 Portfolio Analysis with tidyquant

Assuming that we have S\$100,000 investment in the three local banks since 1st January 2023 until 30th June 2023 and we would like to analyse how our money is growing.

Codes below will be used to import *SGBank.csv* into R environment.

```{r}
SGBank <- read_csv("data/SGBank.csv", show_col_types = FALSE)
```

Next, `tq_get(`) will be used to extract and download the stock prices from Yahoo Finance.

```{r}
SGBank_daily <- SGBank %>%
 select(Symbol) %>%
 tq_get(get = "stock.prices",
 from = "2020-01-01",
 to = "2023-06-30")

```

### 21.9.1 Compute returns of individual bank

In the codes below, `tq_transmute()` is used to compute the monthly returns for each bank.

```{r}
 SGBank_returns_monthly <- SGBank_daily %>%
 group_by(Symbol) %>%
   tq_transmute(select = adjusted,
                mutate_fun = periodReturn,
                period = "monthly",
                col_rename = "Ra")
```

The code chunk below can then be used to display the first 10 records.

```{r}
 kable(head(SGBank_returns_monthly,
 n=10))
```

`tq_portfolio()` is used to compute the combined returns of the three local banks.

```{r}
 wts <- c(0.4, 0.3, 0.3)
 porfolio_returns_monthly <- SGBank_returns_monthly %>%
 tq_portfolio(assets_col = Symbol,
 returns_col = Ra,
 weights = wts,
 col_rename = "Ra")
```

The codes below can then be used to display the first 10 records.

```{r}
kable(head(porfolio_returns_monthly,n=10))
```

**Visualise the combined portfolio returns**

In the codes below, **ggplot2** functions are used to prepare a visualisation showing the combined portfolio returns.

```{r}
 ggplot(data = porfolio_returns_monthly,
 aes(x = date, y = Ra)) +
 geom_bar(stat = "identity",
 fill = palette_light()[[1]]) +
 labs(title = "Porfoli Returns",
 subtitle = "40% DBS, 30% OCBC and 30% UOB",
 caption = "Shows an above zero trend meaning positive retuns",
 x = "", y = "Monthly Returns") +
 geom_smooth(method = "lm") +
 theme_tq() +
 scale_color_tq() +
 scale_y_continuous(labels = scales::percent)
```

### 21.9.2 Compute investment growth

Most of the time, we also want to see how our \$100,000 initial investment is growing. This is simple with the underlying Return.portfolio argument, wealth.index = TRUE. All we need to do is add these as additional parameters to `tq_portfolio()`!

```{r}
  wts <- c(0.4, 0.3, 0.3)
 portfolio_growth_monthly <- SGBank_returns_monthly %>%
 tq_portfolio(assets_col = Symbol,
 returns_col = Ra,
 weights = wts,
 col_rename = "investment.growth",
 wealth.index = TRUE) %>%
 mutate(investment.growth = investment.growth * 100000)
```

### 21.9.3 Visualise the growth

The codes below will be used to plot the investment growth trends.

```{r}
 ggplot(data = portfolio_growth_monthly,
 aes(x = date, y = investment.growth)) +
 geom_line(size = 1, color = palette_light()[[1]]) +
 labs(title = "Portfolio Growth",
 subtitle = "40% DBS, 30% OCBC, and 30% UOB",
 caption = "Now we can really visualize performance!",
 x = "", y = "Portfolio Value") +
 geom_smooth(method = "loess") +
 theme_tq() +
 scale_color_tq() +
 scale_y_continuous(labels = scales::dollar)
```

::: {style="text-align: center"}
$**That's$ $all$ $folks!**$
:::
