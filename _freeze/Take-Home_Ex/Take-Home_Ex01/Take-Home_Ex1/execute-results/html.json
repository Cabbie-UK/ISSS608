{
  "hash": "1263fb90243e9c8f13781d362513ddaa",
  "result": {
    "markdown": "---\ntitle: \"The City of Engagement: Undestanding the Demographics and Financial Characteristics of its Residents\"\nsubtitle: \"Based on a survey of 1,011 representative residents\"\nauthor: \"KB\"\ndate: last-modified\neditor: visual\nexecute:\n  freeze: auto \n  warning: false\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n    toc-depth: 4\n---\n\n\n![Photo: Hadi Zaher](images/paste-B4B7171E.png \"City of Griffith, Australia\"){fig-alt=\"Photo from https://www.domain.com.au/news/griffith-the-charming-town-showing-its-cultural-and-culinary-diversity-with-an-agricultural-backdrop-1045676/\" fig-align=\"center\"}\n\n(First Published: 14-May-2023)\n\n1.  Overview\n\n1.1 Setting the Scene\n\nCity of Engagement, with a total population of 50,000, is a small city located at Country of Nowhere. The city serves as a service centre of an agriculture region surrounding the city. The main agriculture of the region is fruit farms and vineyards.\n\nThe city council is in the process of preparing the Local Plan 2023. A sample survey of representative residents had been conducted to collect data related to their household demographic and spending patterns, among other things. The city aims to use the data to assist with their major community revitalization efforts, including how to allocate a very large city renewal grant they have recently received.\n\n1.2 Our Task\n\nWe are required to create a user-friendly and interactive solution to help city managers and planners to explore the complex data in an engaging way and reveal hidden patterns.\n\nTo this end, we will apply the concepts and methods learned from Lesson 1-4 of the course to reveal the **demographic** and **financial characteristics** of the city, using appropriate static and interactive statistical graphics methods.\n\n2.  Set Up\n\n2.1 Load the relevant packages into the R environment\n\nWe use the `pacman::p_load()` function to load the required R packages into our working environment. The loaded packages are:\n\n-   **plotly**: For creating interactive web-based graphs.\n\n-   **ggstatsplot**: For creating graphics with details from statistical tests.\n\n-   **knitr**: For dynamic report generation\n\n-   **pacthwork**: For combining plots\n\n-   **ggdist**: For visualising distribution and uncertainty\n\n-   **ggthemes**: Provides additional themes for **ggplot2**\n\n-   **tidyverse**: A collection of core packages designed for data science, used extensively for data preparation and wrangling.\n\n-   **DT**: For creating interactive tables using the DataTables JavaScript library\n\n-   **reshape2**: For transforming dataframes from one shape to another\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Load packages\npacman::p_load(plotly, ggstatsplot, knitr, patchwork, ggdist, ggthemes, tidyverse, DT, reshape2)\n```\n:::\n\n\n2.2 Import the data-sets\n\nTwo data-sets are provided for this exercise:\n\n\\(i\\) Partcipants.csv: contains information about the 1011 city residents who responded to the survey. Other than an identifier variable, we also have the household size, a Boolean indicator for children, age, education level, interest group and joviality (or happiness) level of the respondents.\n\nWe import the records in the Participants.csv file as *survey*, convert the `participantID` from numeric to character data type, and convert `educationLevel` from character data type to an ordinal factor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import Participant.csv and assign it to survey variable\nsurvey <- read_csv('data/Participants.csv', show_col_types = FALSE ) %>%\n  mutate(participantId = as.character(participantId)) %>%\n  mutate(educationLevel = as.factor(educationLevel)) %>%\n  mutate(educationLevel = ordered(educationLevel, levels = c(\"Low\",\"HighSchoolOrCollege\", \"Bachelors\",\"Graduate\")))\n```\n:::\n\n\n\\(ii\\) FinancialJournal.csv contains the financial transactions of the respondents from 1 Mar 2022 to 28 Feb 2023. Other than an identifier variable (which permits us to cross-reference to the participants' demographic information), the time, nature and amount involved for the transactions were also provided.\n\nSimiarly, we import the records in the FinancialJournal.csv file as *financials*, and convert the `participantID` from numeric to character data type\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import FinancialJournal.csv and assign it to financials variable\nfinancials <- read_csv('data/FinancialJournal.csv', show_col_types = FALSE) %>% mutate(participantId = as.character(participantId))\n```\n:::\n\n\n3.  Data Wrangling\n\n3.1 Create a month-year column for temporal analysis\n\nThere are 1.5 million financial transactions over the 12-month period and the daily information is too granular for us to analyse. We will create a `month_year` column, from the `timestamp` column, which will then allow us to aggregate the transactions by month for temporal analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinancials <- financials %>%\n  mutate(month_year = format(timestamp, \"%b-%Y\")) %>%\n  mutate(month_year = as.factor(month_year)) %>%\n  mutate(month_year = ordered(month_year, levels = c(\"Mar-2022\", \"Apr-2022\",\"May-2022\",\"Jun-2022\",\"Jul-2022\",\"Aug-2022\",\"Sep-2022\",\"Oct-2022\",\"Nov-2022\", \"Dec-2022\",\"Jan-2023\",\"Feb-2023\")))\n```\n:::\n\n\n3.2 Recode Rental Adjustments\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinancials_grouped <- financials %>%\n  group_by(category) %>%\n  summarise(Count = n(), Sum_of_Amt = round(sum(amount),2)) \n\ndatatable(financials_grouped, options = list(dom='t'), \n              caption = \"Table 1: Breakdown of Financial Journal Transactions By Categories\",\n              rownames = FALSE) %>% \n    formatStyle(1,\n                target = 'row',\n                backgroundColor = styleEqual(c('RentAdjustment'), c('lightblue')))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-d340016e22c0817697fe\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d340016e22c0817697fe\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption>Table 1: Breakdown of Financial Journal Transactions By Categories<\\/caption>\",\"data\":[[\"Education\",\"Food\",\"Recreation\",\"RentAdjustment\",\"Shelter\",\"Wage\"],[3319,790051,296013,131,11463,412659],[-154365.49,-3703420.84,-4143338.04,54932.73,-7307070.95,45597680.42]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>category<\\/th>\\n      <th>Count<\\/th>\\n      <th>Sum_of_Amt<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"t\",\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2]}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"rowCallback\":\"function(row, data, displayNum, displayIndex, dataIndex) {\\nvar value=data[0]; $(row).css({'background-color':value == \\\"RentAdjustment\\\" ? \\\"lightblue\\\" : null});\\n}\"}},\"evals\":[\"options.rowCallback\"],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nRent Adjustments do not occur frequently (only 131 transactions out of the 1.5 million financial transactions relate to RentAdjustment ) and they are essentially price adjustments associated with the cost of accommodation. As such, Rent Adjustment transactions are recoded as Shelter in the financials table.\n\nAfter the recoding, the new breakdown of transactions by category is as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinancials_recoded <- financials\n\nfinancials_recoded$category <- ifelse(financials_recoded$category =='RentAdjustment','Shelter', financials_recoded$category)\n\nfinancials_grouped <- financials_recoded %>%\n  group_by(category) %>%\n  summarise(Count = n(), Sum_of_Amt = round(sum(amount),2)) \n\ndatatable(financials_grouped, options = list(dom='t'), \n              caption = \"Table 2: New breakdown of Financial Journal Transactions By Categories (after recoding)\",\n              rownames = FALSE) %>% \n    formatStyle(1,\n                target = 'row',\n                backgroundColor = styleEqual(c('Shelter'), c('lightblue')))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-6b143fd1d984235b9985\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-6b143fd1d984235b9985\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption>Table 2: New breakdown of Financial Journal Transactions By Categories (after recoding)<\\/caption>\",\"data\":[[\"Education\",\"Food\",\"Recreation\",\"Shelter\",\"Wage\"],[3319,790051,296013,11594,412659],[-154365.49,-3703420.84,-4143338.04,-7252138.22,45597680.42]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>category<\\/th>\\n      <th>Count<\\/th>\\n      <th>Sum_of_Amt<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"t\",\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2]}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"rowCallback\":\"function(row, data, displayNum, displayIndex, dataIndex) {\\nvar value=data[0]; $(row).css({'background-color':value == \\\"Shelter\\\" ? \\\"lightblue\\\" : null});\\n}\"}},\"evals\":[\"options.rowCallback\"],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n3.3 Remove duplicate records found in the financial data\n\nWe notice duplicate records in the financial data. For instance, a survey participant (with Id=0) has duplicate records for Education and Shelter for the same amount and timestamp.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparticipant_0 <- financials_recoded[,-5] %>% \n  filter(participantId=='0') %>%\n  group_by_all() %>%\n  filter(n()>1) %>%\n  arrange_all()\n  \n\ndatatable(participant_0, options = list(dom='t'), \n              caption = \"Table 3: Original and Duplicate Financial Records of a Survey Participant (Id=0)\",\n              rownames = FALSE) %>% \n  formatStyle(3,\n                target = 'row',\n                backgroundColor = styleEqual(c('Education'), c('lightblue'))) %>%\n  formatStyle(3,\n                target = 'row',\n                backgroundColor = styleEqual(c('Shelter'), c('yellow')))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-59ddc09173ec17b1db4d\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-59ddc09173ec17b1db4d\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption>Table 3: Original and Duplicate Financial Records of a Survey Participant (Id=0)<\\/caption>\",\"data\":[[\"0\",\"0\",\"0\",\"0\"],[\"2022-03-01T00:00:00Z\",\"2022-03-01T00:00:00Z\",\"2022-03-01T00:00:00Z\",\"2022-03-01T00:00:00Z\"],[\"Education\",\"Education\",\"Shelter\",\"Shelter\"],[-38.00537955,-38.00537955,-554.9886217,-554.9886217]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>participantId<\\/th>\\n      <th>timestamp<\\/th>\\n      <th>category<\\/th>\\n      <th>amount<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"t\",\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"rowCallback\":\"function(row, data, displayNum, displayIndex, dataIndex) {\\nvar value=data[2]; $(row).css({'background-color':value == \\\"Education\\\" ? \\\"lightblue\\\" : null});\\nvar value=data[2]; $(row).css({'background-color':value == \\\"Shelter\\\" ? \\\"yellow\\\" : null});\\n}\"}},\"evals\":[\"options.rowCallback\"],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nApplying the `duplicated()` function on the financial data, we have\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(sum(duplicated(financials_recoded)),\"duplicate records.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1113 duplicate records.\"\n```\n:::\n:::\n\n\nWe are unsure of the reasons behind the duplicate records 😕. Nonetheless, we will use the `distinct()` function on the financial data to only retain unique records for our analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinancials_unique <- financials_recoded %>%\n  distinct()\n```\n:::\n\n\n3.4 Summarise the financial information by participants\n\nWe aggregate the financial information by participants, taking into consideration the timestamp and category using the `dcast()` function from **reshape2** package.\n\nAfter performing the following steps, we notice 131 survey participants only had transaction records for Mar-2022 , but not in the other months :\n\n-   Group the transactions by participantId, pivot the information by month_year and count the number of transactions per month\n\n-   Add a new column, \"Months_with_trans\", which sum up the no. of months over the 12-month period where there were transactions\n\n-   Perform a value count of the \"Months_with_trans\" column and this reveals the number of participants who only had 1 month of financial transactions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group the transactions by participantId, pivot the information by month_year and count the number of transactions per month.\nfinancials_count <- dcast(financials_unique,\n                           participantId ~ month_year, \n                           value.var = \"amount\", fun.aggregate = length)\n\n# Add a new column, \"Months_with_trans\", which sum up the no. of months over the 12-month period where there were transactions. \nfinancials_count$Months_with_trans <- apply(financials_count[,2:13]!=0,1,sum)\n\n# Perform a value count of the \"Months_with_trans\" column\nsummary_count <- financials_count %>%\n  group_by(Months_with_trans)%>%\n  summarise(Count=n())\n\ndatatable(summary_count, options = list(dom='t'), \n              caption = \"Table 4: No. of Survey Participants grouped by the count of months with transactions\",\n              rownames = FALSE) \n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-aef2417eccac0bff4039\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-aef2417eccac0bff4039\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption>Table 4: No. of Survey Participants grouped by the count of months with transactions<\\/caption>\",\"data\":[[1,12],[131,880]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>Months_with_trans<\\/th>\\n      <th>Count<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"t\",\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[0,1]}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nThe reason for the economic activity of the 131 participants appearing only in Mar-2022 is unclear and requires further investigation. To avoid biasing our results which covers the entire year, we will remove the records of these 131 participants from our subsequent analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List those participants who only had transaction records for 1 month and assign it id_to_exclude\nids_to_exclude <- c(financials_count[financials_count$Months_with_trans==1,]$participantId)\n\n# Exclude from the financial_unique data-set participants whose id are in id_to_exclude list\nfinancials_880 <- subset(financials_unique, !(participantId %in% ids_to_exclude))\n```\n:::\n\n\nNext. we derive the the monthly and total wages of the 880 participants. The first 5 records of the wage information are as follow:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwages_880 <- \n  dcast(subset(financials_880,(category == 'Wage')), participantId ~ month_year, value.var = \"amount\", sum) %>%\n  mutate(total_wages = rowSums(.[2:13],na.rm=TRUE))\n\n\n# Inspect the first 5 records \nhead(wages_880, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  participantId  Mar-2022 Apr-2022 May-2022 Jun-2022 Jul-2022 Aug-2022 Sep-2022\n1             0 11931.948 8636.880 9048.160 9048.160 8636.880 9459.440 9048.160\n2             1 10359.024 7589.639 7951.050 7951.050 7589.639 8312.461 7951.050\n3            10  8954.216 6207.318 6502.904 6502.904 6207.318 6798.491 6502.904\n4           100  5990.472 3783.218 3611.254 3783.218 3783.218 3783.218 3783.218\n5          1000  5253.964 2121.081 2222.085 2222.085 2121.081 2323.089 2222.085\n  Oct-2022 Nov-2022 Dec-2022 Jan-2023 Feb-2023 total_wages\n1 8636.880 9048.160 9048.160 9048.160 8225.600   109816.59\n2 7589.639 7951.050 7951.050 7951.050 7228.227    96374.93\n3 6207.318 6502.904 6502.904 6502.904 5911.731    79303.82\n4 3611.254 3783.218 3955.183 3611.254 3439.289    46918.02\n5 2121.081 2222.085 2222.085 2222.085 2020.078    29292.89\n```\n:::\n:::\n\n\nBased on Table 2 above, Education, Shelter, Food and Entertainment are all living expenses and we will also work out the monthly living expenses and the year's total for the 880 participants. The first 5 records of the expenses information are as follow:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexpenses_880 <- dcast(subset(financials_880,!(category == 'Wage')), participantId ~ month_year, value.var = \"amount\", sum) %>%\n  mutate(total_expenses = rowSums(.[2:13],na.rm=TRUE))\n\n# Inspect the first 5 records \nhead(expenses_880, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  participantId  Mar-2022  Apr-2022  May-2022  Jun-2022  Jul-2022  Aug-2022\n1             0 -1210.049 -1078.279 -1240.619 -1315.648 -1932.751 -1168.974\n2             1 -1929.849 -1364.962 -1209.680 -1529.356 -1368.731 -1301.938\n3            10 -1390.006 -1378.171 -1114.957 -1109.890 -1143.551 -1340.567\n4           100 -1348.511 -1396.971 -1345.599 -1212.583 -1243.120 -1326.042\n5          1000 -2098.306 -1714.850 -1547.361 -1359.852 -1460.345 -1394.524\n   Sep-2022   Oct-2022  Nov-2022  Dec-2022  Jan-2023  Feb-2023 total_expenses\n1 -1143.759  -884.7442 -1231.511 -1215.773 -1067.794 -1152.069      -14641.97\n2 -1235.970 -1239.7351 -1478.765 -1954.347 -1188.012 -1119.430      -16920.77\n3 -1118.623 -1265.3818 -1222.833 -1260.307 -1199.805 -1169.646      -14713.74\n4 -1287.791 -1472.5088 -1285.277 -1225.494 -1105.222 -1040.053      -15289.17\n5 -1537.170 -1649.6618 -1443.646 -1643.306 -1500.960 -1303.951      -18653.93\n```\n:::\n:::\n\n\n3.5 Combine the Financial and Participant Demographic Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged <- survey %>% \n  inner_join(select(wages_880, participantId, total_wages), by = \"participantId\") %>%\n  inner_join(select(expenses_880, participantId, total_expenses), by = \"participantId\")\n\nhead(merged)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 9\n  participantId householdSize haveKids   age educationLevel      interestGroup\n  <chr>                 <dbl> <lgl>    <dbl> <ord>               <chr>        \n1 0                         3 TRUE        36 HighSchoolOrCollege H            \n2 1                         3 TRUE        25 HighSchoolOrCollege B            \n3 2                         3 TRUE        35 HighSchoolOrCollege A            \n4 3                         3 TRUE        21 HighSchoolOrCollege I            \n5 4                         3 TRUE        43 Bachelors           H            \n6 5                         3 TRUE        32 HighSchoolOrCollege D            \n# ℹ 3 more variables: joviality <dbl>, total_wages <dbl>, total_expenses <dbl>\n```\n:::\n:::\n",
    "supporting": [
      "Take-Home_Ex1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\r\n<link href=\"../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/datatables-binding-0.27/datatables.js\"></script>\r\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\r\n<link href=\"../../site_libs/dt-core-1.12.1/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\r\n<link href=\"../../site_libs/dt-core-1.12.1/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/dt-core-1.12.1/js/jquery.dataTables.min.js\"></script>\r\n<link href=\"../../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}