{
  "hash": "cfdfaa1b0531a71de606b02907aaa146",
  "result": {
    "markdown": "---\ntitle: \"1 A Layered Grammar of Graphics: ggplot2 methods\"\nsubtitle: Hands-On Exercise for Week 1\nauthor: \"KB\"\neditor: visual\nexecute:\n  freeze: auto \n  warning: false\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n---\n\n\nPublished: 14-Apr-2023\n\n![](images/paste-F4A48E94.png){fig-align=\"center\"}\n\n## 1.1 Learning Outcome\n\nWe will:\n\n-   learn the basic principles and components of ggplot2\n\n-   gain hands-on experience plotting *functional* graphs ✌️\n\n## 1.2 Getting Started\n\n### 1.2.1 Install and load the required r libraries\n\nLoad the **tidyverse** library. **tidyverse** is a collection of powerful and popular packages, such as ggplot2, dplyr, in R that are designed to help us work with and manipulate data in a consistent and efficient manner.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse)\n```\n:::\n\n\n### 1.2.2 Import the data\n\nWe import the exam_data.csv data-set. This data-set contains the examination scores of a cohort of Primary 3 students from a local school.\n\nThere are a total of seven attributes.\n\n-   The categorical attributes are: ID, CLASS, GENDER and RACE.\n\n-   The continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_data <- read_csv('data/Exam_data.csv', show_col_types = FALSE )\n```\n:::\n\n\n## 1.3 Introduction to ggplot\n\nggplot is an R package for decoratively creating data-driven graphics based on *The Grammar of Graphics.*\n\n### 1.3.1 R Base Graphics Vs ggplot\n\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\n::: panel-tabset\n## R Base Graphics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(exam_data$MATHS)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## ggplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\") + \n  ylab('Frequency') +\n  xlab('Maths score') +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n:::\n\nBase graphics has a pen on paper model: we can only draw on top of the plot, we cannot modify or delete existing content. There is no (user accessible) representation of the graphics, apart from their appearance on the screen. Base graphics includes both tools for drawing primitives and entire plots. Base graphics functions are generally fast, but have limited scope.\n\nOn the other hand, ggplot2 has an underlying grammar, based on the Grammar of Graphics (see sections below), that allows us to compose graphs by combining independent components. This makes ggplot2 powerful. Rather than being limited to sets of pre-defined graphics, we can create novel graphics that are tailored to our specific problem.\n\n## 1.4 Grammar of Graphics\n\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) .\n\nIn brief, the grammar tells us that a graphic maps the data to the aesthetic attributes (colour, shape, size) of geometric objects (points, lines, bars). The plot may also include statistical transformations of the data and information about the plot's coordinate system. Facetting can be used to plot for different subsets of the data. The combination of these independent components are what make up a graphic.\n\n### 1.4.1 A Layered Grammar of Graphics\n\nThe 7 layers are:\n\n![](images/paste-E19CADCF.png){fig-align=\"center\" width=\"439\"}\n\n-   **Data**: Refers to the data-set being plotted\n\n-   **Aesthetics**: Use the attributes of the data to influence visual characteristics, such as position, colours, size, shape, or transparency.\n\n-   **Geometrics**: Represent our data using visual elements such as points, bar or line.\n\n-   **Facets:** Split the data into subsets to create small multiples of the same graph (paneling, multiple plots).\n\n-   **Statistics**:Apply *additional* statistical transformations that summarise the data (e.g. mean, confidence intervals).\n\n-   **Coordinates**: Define the pane on which data is mapped on the graphic.\n\n-   **Theme:** Modify all non-data components of a plot, such as main title, sub-title, y-aixs title, legend, and background.\n\nThe purpose of each layer (or component) is further discussed below.\n\n## 1.5 The Data Layer\n\nLet us call the `ggplot()` function, with *data* argument pointing to the data-set to be used for plotting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nUnder the hood, a ggplot object is initialized using the data provided. We will need to include 2 other key layers - the aesthetic mappings and geometric layer - to see the plot.\n\n::: callout-note\nIf the data-set is not already a data.frame, it will be converted to one by using the fortify() function.\n:::\n\n## 1.6 The Aesthetic Layer\n\nThe aesthetic mappings take attributes of the data and and use them to influence the visual characteristics, such as position, colour, size, shape, or transparency, of the plot.\n\nAll aesthetics of a plot are specified in the [`aes()`](https://ggplot2.tidyverse.org/reference/aes.html) function call. In the later part of this document, we will see that each *geom* layer can have its own aes specification.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS))\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThe tick marks and label for the x-axis are displayed.\n\n## 1.7 The Geometric Layer\n\nGeometric objects are the actual marks we put on a plot. Examples include:\n\n-   *geom_point* for drawing individual points (e.g., a scatter plot)\n\n-   *geom_line* for drawing lines (e.g., for a line charts)\n\n-   *geom_smooth* for drawing smoothed lines (e.g., for simple trends or approximations)\n\n-   *geom_bar* for drawing bars (e.g., for bar, column charts)\n\n-   *geom_histogram* for drawing binned values (e.g. a histogram)\n\n-   *geom_polygon* for drawing arbitrary shapes\n\n-   *geom_map* for drawing polygons in the shape of a map! (we can access the data to use for these maps by using the map_data() function).\n\n![](images/paste-B73DE42E.png) A plot must have at least one geom; there is no upper limit. We can add a geom to a plot using the '**+'** operator.\n\n### 1.7.1 Geometric Object: geom_bar\n\nYup, it's a for a bar chart!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### 1.7.2 Geometric Object: geom_dotplot\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n::: callout-caution\nThe y-axis is not very useful and can be misleading.\n:::\n\nTo address the above concern, we take the following steps:\n\n-   `scale_y_continuous()` is used to turn off the y-axis, and\n\n-   *binwidth argument* is used to change the binwidth to 2.5.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### 1.7.3 Geometric Object: geom_histogram\n\n[*`geom_histogram()`*](https://ggplot2.tidyverse.org/reference/geom_histogram.html) is used to create a simple histogram by using values in *MATHS* field of *exam_data*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\nNote that the default bin is 30.\n:::\n\n### 1.7.4 Modify a geometric object by changing geom()\n\nThe following arguments of the `geom()` function can be used:\n\n-   *bins* argument is used to change the number of bins to 20,\n\n-   *fill* argument is used to shade the histogram with light blue color, and\n\n-   *color* argument is used to change the outline colour of the bars in black\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n-   These changes are applied at the specific geom() layer and will not perpertuate when we include another geom() layer.\n:::\n\n### 1.7.5 Modify a geometric object by changing aes()\n\nWe can changes the interior colour of the histogram (i.e. *fill*) by using sub-group of *`aes()`*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n-   ggplot2 takes care of the details of converting data into aesthetics (e.g., 'red', 'yellow', 'green') with a scale. There is one scale for each aesthetic mapping in a plot. The scale is also responsible for creating a guide, an axis or legend, that allows us to read the plot, converting aesthetic values back into data values.\n\n-   If we want to set an aesthetic to a fixed value, without scaling it, do so in the individual layer outside of [aes()](https://ggplot2.tidyverse.org/reference/aes.html). Refer to section 1.7.4.\n:::\n\n### 1.7.6 Geometric Object: geom_density\n\n[`geom-density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) computes and plots [kernel density estimate](https://en.wikipedia.org/wiki/Kernel_density_estimation), which is a smoothed version of the histogram.\n\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nWe can plot two kernel density lines by using *colour* or *fill* arguments of *aes().*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### 1.7.7 Geometric Object: geom_boxplot\n\n[`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html) displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all \"outlying\" points individually.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nNotches are indentation on the box-plot at the median value to help visually assess whether the medians of distributions differ. The notch indicates a confidence interval around the median, calculated using the median absolute deviation. If the notches of two box plots do not overlap, it suggests that the medians of the two groups are significantly different. We can show the indentation using the notch argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n### 1.7.8 Geometric Object: geom_violin\n\n[`geom_violin`](https://ggplot2.tidyverse.org/reference/geom_violin.html) is designed for creating violin plot. With ordinary density curves (see section 1.7.6), it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it's easier to compare several distributions since they're placed side by side.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n### 1.7.9 Geometric Object: geom_point\n\n[`geom_point()`](https://ggplot2.tidyverse.org/reference/geom_point.html) is especially useful for creating scatterplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n### 1.7.10 Combine several geom objects\n\nFor instance, we can plot the data points on the boxplots by using both `geom_boxplot()` and `geom_point()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)        \n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## 1.8 The Statistics Layer\n\nThe [Statistics functions](https://ggplot2.tidyverse.org/reference/#stats) statistically transform data, usually as some form of summary. For example:\n\n-   frequency of values of a variable (bar graph)\n\n    -   a mean\n\n    -   a confidence limit\n\n-   There are two ways to use these functions:\n\n    -   add a `stat_()` function and override the default geom, or\n\n    -   add a `geom_()` function and override the default stat.\n\n### 1.8.1 Working with the stat() function\n\nWe can use stat_summary() function to include the mean value on a boxplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun =\"mean\",         \n               colour =\"red\",        \n               size=4)               \n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n### 1.8.2 Working with the geom() function\n\nWe can also use the geom() function to get the same result.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n### 1.8.3 Add a best fit curve on a scatter-plot\n\nThe scatter-plot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve using the `geom_smooth()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\nThe default smoothing method used is *loess* (short for \"locally weighted scatter-plot smoothing\"). The *loess* method involves fitting a smooth curve to a scatter-plot of data points, where the curve is weighted to give more emphasis to nearby points and less emphasis to points that are far away.\n:::\n\nThe default smoothing method can be overridden as shown below. The \"lm\" method can be used to fit a straight line to a scatterplot of data points. This line represents the best linear approximation of the relationship between the variables and can be used to make predictions or estimate the effect of one variable on the other.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## 1.9 The Facet Layer\n\nFaceting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: [`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) and [`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html)`()`.\n\n### 1.9.1 Working with `facet_wrap()`\n\n`facet_wrap` wraps a 1-d sequence of panels into 2-d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n\nLet's do a trellis plot using `facet-wrap()` for the maths score of each class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n### 1.9.1 Working with `facet_grid()`\n\n`facet_grid()` forms a matrix of panels defined by row and column facetting variables. It is most useful when we have two discrete variables, and all combinations of the variables exist in the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n  facet_grid(CLASS~.) +\n  theme(plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), \"cm\"))\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nFrom the above, it's now more apparent that the maths scores decrease as we move down from Class 3A to Class 3I.\n\n## 1.10 The Coordinates Layer\n\nThere are two types of coordinate systems. Linear coordinate systems preserve the shape of geoms:\n\n-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default Cartesian coordinate system, where the 2-d position of an element is given by the combination of the x and y positions.\n\n-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): Cartesian coordinate system with x and y axes flipped.\n\n-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): Cartesian coordinate system with a fixed aspect ratio.\n\nOn the other hand, non-linear coordinate systems can change the shapes: a straight line may no longer be straight. The closest distance between two points may no longer be a straight line.\n\n-   [`coord_map()`](https://ggplot2.tidyverse.org/reference/coord_map.html)/[`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html)/[`coord_sf()`](https://ggplot2.tidyverse.org/reference/ggsf.html): Map projections.\n\n-   [`coord_polar()`](https://ggplot2.tidyverse.org/reference/coord_polar.html): Polar coordinates.\n\n-   [`coord_trans()`](https://ggplot2.tidyverse.org/reference/coord_trans.html): Apply arbitrary transformations to x and y positions, after the data has been processed by the stat.\n\n### 1.10.1 Working with Coordinates\n\nBy the default, the bar chart of ggplot2 is in vertical form (i.e. column chart).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nWe can flip the horizontal bar chart into vertical bar chart by using `coord_flip().`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n### 1.10.2 Change the y- and x-axis range\n\nWe can use the `coord_caatesian()` function to fix both the y-axis and x-axis range from 0-100.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n## 1.11 The Theme Layer\n\nThemes control elements of the graph not related to the data. For example:\n\n-   background colour\n\n-   size of fonts\n\n-   gridlines\n\n-   labels colour\n\nBuilt-in themes include: - `theme_gray()` (default) - `theme_bw()` - `theme_classic()`\n\nA list of theme can be found at this [link](https://ggplot2.tidyverse.org/reference/ggtheme.html). Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n### 1.11.1 Working with theme\n\nA horizontal bar chart plotted using various themes.\n\ntheme_classic() is my favourite! 😜\n\n::: panel-tabset\n## theme_gray()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n## theme_bw()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n## theme_classic()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n## theme_minimal()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex1_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n:::\n\n## 1.12 Reference\n\n-   Hadley Wickham (2023) [**ggplot2: Elegant Graphics for Data Analysis**](https://ggplot2-book.org/). Online 3rd edition.\n\n-   Winston Chang (2013) [**R Graphics Cookbook 2nd edition**](https://r-graphics.org/). Online version.\n\n-   Healy, Kieran (2019) [**Data Visualization: A practical introduction**](https://socviz.co/). Online version\n\n-   [Learning ggplot2 on Paper -- Components](https://henrywang.nl/learning-ggplot2-on-paper-components/)\n\n-   [Learning ggplot2 on Paper -- Layer](https://henrywang.nl/learning-ggplot2-on-paper-layer/)\n\n-   [Learning ggplot2 on Paper -- Scale](https://henrywang.nl/tag/learning-ggplot2-on-paper/)\n\n::: {style=\"text-align: center\"}\n$**That's$ $all$ $folks!**$\n:::\n",
    "supporting": [
      "Hands-On_Ex1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}