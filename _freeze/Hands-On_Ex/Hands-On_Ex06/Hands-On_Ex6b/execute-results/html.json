{
  "hash": "a21a6a92f0e8f51511bb4c129845da4a",
  "result": {
    "markdown": "---\ntitle: \"11 Visual Correlation Analysis of Numerical and Categorical Data\"\nsubtitle: Hands-On Exercise for Week 6\ndate: last-modified\nauthor: \"KB\"\neditor: visual\nexecute:\n  freeze: auto \n  warning: false\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n    toc-depth: 4\n---\n\n\n(First published: May 17. 2023)\n\n## 11.1 Learning Outcome\n\nWe will learn how to plot data visualisation for visualising correlation matrix with R using 3 methods:\n\n1.  Create correlation matrix using [`pairs()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.0/topics/pairs) of R Graphics\n\n2.  Plot corrgram using **corrplot** package of R\n\n3.  Create an interactive correlation matrix using **plotly**\n\nWhen multivariate data is used, the correlation coefficients of each pair of variables are displayed in a table form known as correlation matrix or scatterplot matrix.\n\nThere are three broad reasons for computing a correlation matrix:\n\n-   To reveal the relationship between high-dimensional variables pair-wisely.\n\n-   As input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\n\n-   As a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression's estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, [Corrgram](http://www.datavis.ca/papers/corrgram.pdf) tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\n-   Rendering the value of a correlation to depict its sign and magnitude, and\n\n-   Reordering the variables in a correlation matrix so that \"similar\" variables are positioned adjacently, facilitating perception.\n\n## 11.2 Getting Started\n\n### 11.2.1 Install and load the required r libraries\n\nInstall and load the the required R packages. The name and function of the new package that will be used for this exercise is as follow:\n\n-   **corrplot** : for creating correlation matrices and correlation plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n```\n:::\n\n\n**11.2.2 Import the data**\n\nWe will use the [Wine Quality Data Set](https://archive.ics.uci.edu/ml/datasets/wine+quality) of UCI Machine Learning Repository. The data set consists of 13 variables and 6497 observations. For this exercise, we have combined the red wine and white wine data into one data file. It is called wine_quality and is in csv file format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine <- read_csv(\"data/wine_quality.csv\", show_col_types = FALSE)\n```\n:::\n\n\n## 11.3 Building Correlation Matrix with `pairs()`function\n\nWe can create a scatterplot matrix by using the *pairs* function of R Graphics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,1:11])\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex6b_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nThe required input of `pairs()` can be a matrix or data frame.\n\nColumns 2 to 12 of wine dataframe is used to build the next scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12])\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex6b_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n**Drawing the lower corner**\n\n`pairs()` function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\n\nTo show the lower half of the correlation matrix, the upper.panel argument will be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], upper.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex6b_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nSimilarly, we can display the upper half of the correlation matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], lower.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex6b_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n**Including with correlation coefficients**\n\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, [`panel.cor`](https://www.rdocumentation.org/packages/xcms/versions/1.48.0/topics/panel.cor)`()` function will be used. This will also show higher correlations in a larger font.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex6b_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## 11.4 Visualise Correlation Matrix using `ggcormat()` function\n\nOne of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e.Â more than 500 observations). To overcome this problem, **Corrgram** data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\n\nThere are at least three R packages provide function to plot corrgram, they are:\n\n-   [corrgram](https://cran.r-project.org/web/packages/corrgram/)\n\n-   [ellipse](https://cran.r-project.org/web/packages/ellipse/)\n\n-   [corrplot](https://cran.r-project.org/web/packages/corrplot/)\n\nOn top that, some R packages like **ggstatsplot** package also provides functions for building corrgram.\n\nIn this section, you will learn how to visualise correlation matrix by using [`ggcorrmat()`](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcorrmat.html) of [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/) package.\n\n**The basic plot**\n\n`ggcorrmat()` can provide a comprehensive and yet professional statistical report as shown in the figure below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nlibrary(ggcorrplot)\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11\n)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex6b_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n::: callout-warning\n## On ggcorrmat()\n\nThe `ggcorrmat()` function from the **ggstatsplot** package can conflict with the `titleGrob()` function from the **ggpubr** package. Both packages have functions with the same name, which is why we have to prefix the function with \"ggstatsplot::\".\n:::\n\nLet's touch up the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs of variables are not significant at p < 0.05\"\n)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex6b_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThings to note:\n\n-   `cor.vars` argument is used to compute the correlation matrix needed to build the corrgram.\n\n-   `ggcorrplot.args` argument provide additional (mostly aesthetic) arguments that will be passed to [`ggcorrplot::ggcorrplot`](http://www.sthda.com/english/wiki/ggcorrplot-visualization-of-a-correlation-matrix-using-ggplot2)`()` function. The list should avoid any of the following arguments since they are already internally being used: `corr`, `method`, `p.mat`, `sig.level`, `ggtheme`, `colors`, `lab`, `pch`, `legend.title`, `digits`.\n\nThe following codes can be used to control specific components of the plot such as the font size of the x-axis, y-axis and the statistical report.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n```\n:::\n\n\n**Building multiple plots**\n\nSince **ggstasplot** is an extension of ggplot2, it also supports faceting. However the feature is not available in `ggcorrmat()` but in the [`grouped_ggcorrmat()`](https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggcorrmat.html) of **ggstatsplot**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex6b_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nThings to note:\n\n-   to build a facet plot, the only argument needed is `grouping.var`.\n\n-   Behind `group_ggcorrmat()`, **patchwork** package is used to create the multiplot. `plotgrid.args` argument provides a list of additional arguments passed to [*patchwork::wrap_plots*](https://patchwork.data-imaginist.com/reference/wrap_plots.html), except for guides argument which was separately specified earlier.\n\n-   Likewise, `annotation.args` argument is calling [*plot annotation arguments*](https://patchwork.data-imaginist.com/reference/plot_annotation.html) of patchwork package.\n\n## 11.5 Visualise Correlation Matrix Using **corrplot** package\n\n**Getting started with corrplot** Before we can plot a corrgram using `corrplot()`, we need to compute the correlation matrix of wine data frame. Thereafter, [`corrplot()`](https://www.rdocumentation.org/packages/corrplot/versions/0.2-0/topics/corrplot) is used to plot the corrgram by using all the default settings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the correlation matrix\nwine.cor <- cor(wine[, 1:11])\n\n# Create the basic corrplot\ncorrplot(wine.cor)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex6b_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as **saturation** is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship.\n\nWorking with visual geometrics\n\nIn **corrplot** package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the *method* argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\") \n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex6b_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n**Working with layout**\n\n`corrplor()` supports three layout types, namely: \"full\", \"upper\" or \"lower\". The default is \"full\" which display full matrix. The default setting can be changed by using the *type* argument of `corrplot()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex6b_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nThe default layout of the corrgram can be further customised. For example, arguments *diag* and *tl.col* are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex6b_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nWe can also experiment with other layout design argument such as *tl.pos*, *tl.cex*, *tl.offset*, *cl.pos*, *cl.cex* and *cl.offset*,\n\n**Working with mixed layout**\n\nWith **corrplot** package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the [`corrplot.mixed()`](https://www.rdocumentation.org/packages/corrplot/versions/0.84/topics/corrplot.mixed), a wrapped function for mixed visualisation style will be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex6b_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nNotice that argument *lower* and *upper* are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e.Â number) is used to map the upper half of the corrgram. The argument *tl.pos*, on the other, is used to specify the placement of the axis label. Lastly, the *diag* argument is used to specify the glyph on the principal diagonal of the corrgram.\n\n### 11.5.1 Combining corrgram with the significant test\n\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\n\nThee figure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free sulfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\n\nWe can use the `cor.mtest()` to compute the p-values and confidence interval for each pair of variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n```\n:::\n\n\nWe can then include the results in the *p.mat* argument of `corrplot()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex6b_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n**Reorder a corrgram**\n\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e.Â \\\"original\\\"). The default setting can be over-write by using the *order* argument of `corrplot().` Currently, **corrplot** package support four sorting methods, they are:\n\n-   \\\"AOE\\\" is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n\n-   \\\"FPC\\\" for the first principal component order.\n\n-   \\\"hclust\\\" for hierarchical clustering order, and \\\"hclust.method\\\" for the agglomeration method to be used.\n\n    -   \\\"hclust.method\\\" should be one of \\\"ward\\\", \\\"single\\\", \\\"complete\\\", \\\"average\\\", \\\"mcquitty\\\", \\\"median\\\" or \\\"centroid\\\".\n\n-   \\\"alphabet\\\" for alphabetical order.\n\n\\\"AOE\\\", \\\"FPC\\\", \\\"hclust\\\", \\\"alphabet\\\". More algorithms can be found in **seriation** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex6b_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n**Reordering a correlation matrix using hclust**\n\nIf using **hclust**, `corrplot()` can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex6b_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n## 11.6 References\n\n-   Michael Friendly (2002). \\\"Corrgrams: Exploratory displays for correlation matrices\\\". *The American Statistician*, 56, 316--324.\n\n-   D.J. Murdoch, E.D. Chow (1996). \\\"A graphical display of large correlation matrices\\\". *The American Statistician*, 50, 178--180.\n",
    "supporting": [
      "Hands-On_Ex6b_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}