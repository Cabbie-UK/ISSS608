{
  "hash": "42565873c6e2737569d0534e28dee5e6",
  "result": {
    "markdown": "---\ntitle: \"5 Visual Statistical Analysis\"\nsubtitle: Hands-On Exercise for Week 4\nauthor: \"KB\"\neditor: visual\nexecute:\n  freeze: auto \n  warning: false\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n    toc-depth: 4\n---\n\n\nPublished: 4-May-2023\n\n## 5.1 Learning Outcome\n\nWe will learn to create visual graphics with rich statistical information, visualise model diagnostics, and model parameters.\n\n## 5.2 Getting Started\n\n### 5.2.1 Install and load the required r libraries\n\nInstall and load the the required R packages. The name and function of the *new* package that will be used for this exercise are as follow:\n\n-   **ggstatsplot**: offers various types of statistical plots and functions for statistical tests such as t-tests, ANOVA, correlation tests, and regression analysis\n\n-   **performance**: offers functions for computing model evaluation metrics for model evaluation and comparison\n\n-   **parameters**: provides for managing complex experiments with many parameters and for automating parameter tuning in machine learning workflows\n\n-   [**see**](https://easystats.github.io/see/): provides a host of functions and tools to produce a range of publication-ready visualizations for model parameters, predictions, and performance diagnostics\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse,readxl, ggstatsplot, performance, parameters, see)\n```\n:::\n\n\n## 5.3 Visual Statistical Analysis with **ggstatsplot** package\n\n[**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/) is an extension of [**ggplot2**](https://ggplot2.tidyverse.org/) package for creating graphics enriched with statistical test details. It:\n\n-   Provides alternative statistical inference methods by default.\n\n-   Follows the best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting. For example, here are the results from a t-test:\n\n![](images/paste-B71E582F.png)\n\n### 5.3.1 Import the data\n\nWe will be using the same exam scores data-set that was featured in my [Hands-On Exercise for Week 1](https://boomie-boom-isss608.netlify.app/hands-on_ex/hands-on_ex01/hands-on_ex1#import-the-data \"Additional info on the data-set\").\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv('data/Exam_data.csv', show_col_types = FALSE )\n```\n:::\n\n\n### 5.3.2 One-sample Mean Test\n\nWe use [*`gghistostats()`*](https://indrajeetpatil.github.io/ggstatsplot/reference/gghistostats.html) to to build an visual of one-sample test on English scores.\n\nIn the following case:\n\n-   **`type = \"bayes\"`**: specifies the type of statistical test to perform on the data to generate the interval estimate. In this case, it is a Bayesian analysis, which provides a posterior distribution of plausible values based on prior knowledge and observed data.\n\n-   **`test.value = 60`**: specifies the value for the null hypothesis that will be used to calculate the probability of the observed data. In this case, it is 60, which assumes that the average English score is 60.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex4a_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n**Unpacking the Bayes Factor**\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\n\nThe Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\n\nWhen we are comparing two hypotheses, H~1~ (the alternate hypothesis) and H~0~ (the null hypothesis), the Bayes Factor is often written as B~10~. It can be defined mathematically as:\n\n![](images/paste-B5B2345F.png)\n\nThe [**Schwarz criterion**](https://www.statisticshowto.com/bayesian-information-criterion/) is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n**How to interpret Bayes Factor**\n\nA **Bayes Factor** can be any positive number. One of the most common interpretations is this one---first proposed by Harold Jeffereys (1961) and slightly modified by [Lee and Wagenmakers](https://www-tandfonline-com.libproxy.smu.edu.sg/doi/pdf/10.1080/00031305.1999.10474443?needAccess=true) in 2013: ![](images/paste-8A6AF405.png)\n\n### 5.3.3 Two-sample Mean Test\n\nNext, we use [`ggbetweenstats()`](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) to build a visual for two-sample mean test of Maths scores by gender. This generates a combination of box and violin plots along with jittered data points for between-subjects designs with statistical details included in the plot as a subtitle.\n\nIn the following case:\n\n-   **`type = \"np\"`**: specifies the type of test to be used to compare the groups, in this case, a non-parametric test (Wilcoxon-Mann-Whitney test).\n\n-   **`messages = FALSE`**: specifies whether or not to display informative messages about the statistical test being performed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex4a_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n### 5.3.4 One-way ANOVA Test\n\nWe can also use `ggbetweenstats()` to build a visual for One-way ANOVA test on English score by race.\n\nIn the following case:\n\n-   **`type = \"p\"`**: specifies the type of test to be used to compare the groups, in this case, a parametric test (one-way ANOVA).\n\n-   **`mean.ci = TRUE`**: specifies whether or not to display confidence intervals for the group means.\n\n-   **`pairwise.comparisons = TRUE`**: specifies whether or not to display pairwise comparisons between the groups.\n\n-   **`pairwise.display = \"s\"`**: specifies the format of the pairwise comparison display, in this case, \"s\" for compact letter display.\n\n-   **`p.adjust.method = \"fdr\"`**: specifies the method used for p-value adjustment for multiple comparisons, in this case, false discovery rate (FDR) correction.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex4a_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n**Summary of tests with ggbetweenstats**\n\n![](images/paste-01306AC1.png) ![](images/paste-7CF1AB54.png) ![](images/paste-166AA56B.png)\n\n### 5.3.5 Significant Test of Correlation\n\nWe can use [`ggscatterstats()`](https://indrajeetpatil.github.io/ggstatsplot/reference/ggscatterstats.html) to build a visual for Significant Test of Correlation between Maths scores and English scores. This creates a scatter plot with overlaid regression lines between the variables \"MATHS\" and \"ENGLISH\" in the \"exam\" dataset.\n\nIn the following case:\n\n-   **`marginal = TRUE`**: specifies whether or not to display marginal histograms or density plots along the axes of the scatter plot. In this case, marginal plots are not displayed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = TRUE,\n  )\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex4a_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### 5.3.5 Significant Test of Association (Dependence)\n\nFirst, we bin the Maths scores into a 4-class variable using `cut()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam1 <- exam %>% \n  mutate(MATHS_bins = cut(MATHS, \n               breaks = c(0,60,75,85,100))\n  )\n```\n:::\n\n\nWe use [*ggbarstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbarstats.html) to build a visual for Significant Test of Association between the categorised Maths scores and gender.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex4a_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## 5.4 Visualise Models\n\nIn this section, we will learn how to visualise model diagnostic and model parameters.\n\n### 5.4.1 Import the data\n\nToyota Corolla case study will be used and the datat-set is imported. We will build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   <dbl> <chr>    <dbl>     <dbl>     <dbl>    <dbl>  <dbl>         <dbl>  <dbl>\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period <dbl>, HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>, …\n```\n:::\n:::\n\n\n### 5.4.2 Create a Multi-variate Linear Regression Model\n\nWe use `lm()` function of R **Base Stats** to calibrate a multi-variate linear regression model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n```\n:::\n:::\n\n\n### 5.4.3 Model Diagnostic: Check for Multicolinearity\n\nWe use [`check_collinearity()`](https://easystats.github.io/performance/reference/check_collinearity.html) of [**performance**](https://easystats.github.io/performance/) package to conduct the test.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_collinearity(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n```\n:::\n\n```{.r .cell-code}\nplot(check_collinearity(model))\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex4a_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### 5.4.4 Model Diagnostic: Check Normality Assumption\n\nThere is the [`check_normality()`](https://easystats.github.io/performance/reference/check_normality.html) function to conduct the test.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\ncheck_n <- check_normality(model1)\n\nplot(check_n)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex4a_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### 5.4.5 Model Diagnostic: Check model for homogeneity of variances\n\nWe can use the [`check_heteroscedasticity()`](https://easystats.github.io/performance/reference/check_heteroscedasticity.html) to do this check.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_h <- check_heteroscedasticity(model1)\n\nplot(check_h)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex4a_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### 5.4.6 Model Diagnostic: Complete Check\n\nThank goodness! There's also a [`check_model()`](https://easystats.github.io/performance/reference/check_model.html)function to conduct the diagnostic tests discussed above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(model1)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex4a_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n### 5.4.7 Visualise Regression Parameters\n\nWe can use `plot(`) function of **see** package and `parameters()` of **parameters** package to visualise the parameters of a regression model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(parameters(model1))\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex4a_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nAlternatively, we can use [`ggcoefstats()`](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcoefstats.html) of **ggstatsplot** package to visualise the parameters of a regression model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggcoefstats(model1, \n            output = \"plot\")\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex4a_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n::: {style=\"text-align: center\"}\n$**That's$ $all$ $folks!**$\n:::\n",
    "supporting": [
      "Hands-On_Ex4a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}