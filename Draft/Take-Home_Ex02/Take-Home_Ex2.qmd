---
title: "FishEye Knowldge Graph: Identify Temporal Patterns of individual entities and between entities"
subtitle: "VAST Chaellenge 2023: Mini-Challenge 2"
author: "KB"
date: last-modified
editor: visual
execute:
  freeze: auto 
  warning: false
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    code-line-numbers: true
    toc-depth: 4
---

(First Published: May 28, 2023)

## Load all relevant packages

```{r}
pacman::p_load(igraph, tidygraph, ggraph, visNetwork, lubridate, clock,               tidyverse, graphlayouts,jsonlite, plotly, patchwork, knitr, kableExtra, igraph, ggdist, heatmaply)

options(scipen = 999, digits = 15)
```

import data

```{r}
#| eval: false
mc2 <- fromJSON("data/mc2_challenge_graph.json")
```

Extract the nodes info from mc2 data frame

```{r}
#| eval: false
mc2_nodes <- as_tibble(mc2$nodes) %>%
  select(id, shpcountry, rcvcountry)
```

-   id \-- Name of the company that originated (or received) the shipment

-   shpcountry \-- Country the company most often associated with when shipping

-   rcvcountry \-- Country the company most often associated with when receiving

## Read the original nodes table

We will store mc2_nodes in rds format for ease of subsequent retrieval. This code need only be executed once and henece. Thereafter we will reload the mc2_nodes dataframe again

```{r}
# write_rds(mc2_nodes, "data/mc2_nodes.rds")
mc2_nodes = read_rds("data/mc2_nodes.rds")
```

Extract the edges info from mc2 data frame

```{r}
#| eval: false

mc2_edges <- as_tibble(mc2$links) %>%
  select(source, target, arrivaldate, hscode, valueofgoods_omu, volumeteu, weightkg,  valueofgoodsusd)
```

-   arrivaldate \-- Date the shipment arrived at port in YYYY-MM-DD format.

-   hscode \-- Harmonized System code for the shipment. Can be joined with the hscodes table to get additional details.

-   valueofgoods_omu \-- Customs-declared value of the total shipment, in Oceanus Monetary Units (OMU)

-   volumeteu \-- The volume of the shipment in 'Twenty-foot equivalent units', roughly how many 20-foot standard containers would be required. (Actual number of containers may have been different as there are 20ft and 40ft standard containers and tankers that do not use containers)

-   weightkg \-- The weight of the shipment in kilograms (if known)

## Read the original edge table

Also store the mc2_edge info in native rds format.

```{r}
#| eval: false

#write_rds(mc2_edges, "data/mc2_edges.rds")
mc2_edges <- read_rds("data/mc2_edges.rds") %>%
  mutate(arrivaldate = as.Date(arrivaldate, format = "%Y-%m-%d"))
```

Aggregate the weight information between each pair of notes and by the relationship type

Get summary stats on the edge data frame

```{r}
#| eval: false

summary(mc2_edges)
```

Remove likely duplicate records from edges

```{r}
#| eval: false

# Check for the presence of duplicate edge 
paste(sum(duplicated(mc2_edges)),"duplicate records.")
```

We are unsure of the reasons behind the duplicate records and do not discount the possibility that they could be genuine. On balance, we find it unlikely that duplicate records exist for every day, with same weight and among the same pair of entities. Hence, we will use the `distinct()` function on the edge data to only retain only unique edge records for our analysis.

```{r}
#| eval: false
#| 
mc2_edges_unique <- mc2_edges %>%
  distinct()

summary(mc2_edges_unique)
```

**Identifying edge records that relate to the fishing industry**

We extract the top 5 HS code used for the edge records and match against the [HS Nomenclature 2022](https://www.wcoomd.org/en/topics/nomenclature/instrument-and-tools/hs-nomenclature-2022-edition/hs-nomenclature-2022-edition.aspx) available at World Customs Organisation (WCO)'s website, supplemented by the HSN Code List that is found on [Connect2India](https://connect2india.com/hs-classification.html) website.

```{r}
#| eval: false

hscode_count <- mc2_edges_unique %>%
  group_by(hscode) %>%
  summarise(count=n()) %>% 
  ungroup 

head(hscode_count[order(-hscode_count$count), ],n=5)
```

| S/No. | HS Code | Description                                                                                                                                                                                         |
|---------------|---------------|------------------------------------------|
| 1     | 306170  | Fish and crustaceans, molluscs and other aquatic invertebrates.                                                                                                                                     |
| 2     | 950300  | Tricycles, scooters, pedal cars and similar wheeled toys; dolls' carriages; dolls; other toys; reduced-size ("scale") models and similar recreational models, working or not; puzzles of all kinds. |
| 3     | 870899  | Other parts and accessories of the motor vehicles                                                                                                                                                   |
| 4     | 611020  | Cotton jerseys, pullovers, cardigans, waistcoats and similar articles, knitted or crocheted.                                                                                                        |
| 5     | 940360  | Other wooden furniture                                                                                                                                                                              |

: From the above, it is obvious not all transactions relate to fishing, We scanned WCO's HS Nomenclature 2022 edition and identified a list 46 HS codes which are associated with fish or the fishing industry and import them in our work environment,

```{r}
#| eval: false

hscode_fish <- read_csv('data/lookup_hscode.csv', show_col_types = FALSE ) %>%
  mutate(hscode = as.character(hscode))
```

Next, we will use this list to extract edge records related to fish industry.

```{r}
#| eval: false

mc2_edges_fish <- mc2_edges_unique %>%
  filter(hscode %in% hscode_fish$hscode) %>%
  # further filter by code '1604','1605 for fish products
  filter(substr(hscode,start = 1,stop=4) %in% c('1604','1605'))
```

We do a frequency count by hscode to understand the volume for each hscode, the subset contains 30 hscodes pertaining to different types of seafood.

**Prepare the Edges for Analysis**

Group edges by source, target, date, and aggregate by count ( which will be renamed as weight), sum of weight, sum of value

```{r}
#| eval: false

# minimum count (or weight) cut-off for a substantial relationship to exist over 7 years
cut_off = 20


# group by edges 
mc2_edges_aggregated <- mc2_edges_fish %>%
  mutate(weeknumber = isoweek(arrivaldate),
         year_month = format(arrivaldate,"%Y-%m"),
         year = year(arrivaldate)) %>%
  group_by(source,target,hscode, year_month, year) %>%
  summarise(weight=n(),weight_sum = sum(weightkg),value_goods_sum =sum(valueofgoodsusd, na.rm = TRUE)) %>%
  filter(source != target) %>%
  filter(weight>cut_off) %>%
  ungroup %>%
  inner_join(select(hscode_fish, hscode, short_desc), by = "hscode")

# Save a copy of the edge file
write_rds(mc2_edges_aggregated, "data/mc2_edges_aggregated.rds")

```

```{r}
#| echo: true

# load the edge file
mc2_edges_aggregated = read_rds("data/mc2_edges_aggregated.rds")
```

y-o-y plot

```{r}
weight_yoy = ggplot(mc2_edges_aggregated, aes(x= as.factor(year), y = weight_sum/1000000)) +
  geom_col() +
  #geom_text(aes(label = weight_sum), vjust = -0.5,color='white') +
  labs(x = "Year", y = "Total Weight(kg in millions") +
  ggtitle("Total Weight by Year")

count_yoy = ggplot(mc2_edges_aggregated, aes(x= as.factor(year), y = weight)) +
  geom_col() +
  #geom_text(aes(label = weight_sum), vjust = -0.5,color='white') +
  labs(x = "Year", y = "Total Transactions") +
  ggtitle("Total Transactions by Year")

value_yoy = ggplot(mc2_edges_aggregated, aes(x= as.factor(year), y = value_goods_sum/1000000)) +
  geom_col() +
  #geom_text(aes(label = weight_sum), vjust = -0.5,color='white') +
  labs(x = "Year", y = "Total Value (USD in millions") +
  ggtitle("Total Value by Year")


(count_yoy + weight_yoy)/value_yoy
```

**Prepare the nodes for Analysis**

The nodes within the node file must be unique and therefore the `filter` function is used to extract only the nodes that appear based on the *source* and *target*.

```{r}
#| eval: false

mc2_nodes_aggregated <- mc2_nodes %>%
  filter(id  %in% c(mc2_edges_aggregated$source, mc2_edges_aggregated$target)) %>%
  # Duplicate the id column as this name will be replaced once we convert to when we apply tbl_graph()
  mutate(label = id) %>%
  arrange(label) %>%
  mutate(row_id = row_number()) %>%
  distinct() 

# Replace with NA values in shpcountry and rcvcountry to prevent downstream issue
mc2_nodes_aggregated <- replace(mc2_nodes_aggregated, is.na(mc2_nodes_aggregated), 'unknown')

# Save a copy of the nodes file
write_rds(mc2_nodes_aggregated, "data/mc2_nodes_aggregated.rds")
```

```{r}
#| echo: true

# load the node file
mc2_nodes_aggregated = read_rds("data/mc2_nodes_aggregated.rds")
```

**Prepare the tbl_graph_object**

```{r}
mc2_graph <- tbl_graph(nodes = mc2_nodes_aggregated,
                           edges = mc2_edges_aggregated, 
                           directed = TRUE)
```

**Derive centrality measures for nodes**

Since this is a directed graph, will compute the in-degree centrality, out-degree centrality, closeness and betweenness measures for the nodes.

```{r}
mc2_graph <- mc2_graph %>%
  activate(nodes) %>% 
  mutate(
          in_deg_centrality = round(centrality_degree(weights = weight, mode = "in", loops = FALSE),3),
          out_deg_centrality = round(centrality_degree(weights = weight, mode = "out", loops = FALSE),3),
          out_deg_closeness = round(centrality_closeness(weights=weight,mode='out',normalized = TRUE),3),
          in_deg_closeness = round(centrality_closeness(weights=weight,mode='in',normalized = TRUE),3)) 

#%>%
  # mutate(combined_degree = in_deg_centrality - out_deg_centrality) %>%
  # mutate(combi_norm_degree =((combined_degree-min(combined_degree))/(max(combined_degree)-min(combined_degree)) )*100) 
           
```

Charting a plot

```{r}
set.seed(123)

mc2_graph %>%
  ggraph(layout = 'fr') +
  geom_edge_link(aes(width=weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes())
```

Remove disconnected nodes and focus on the main graph

```{r}
# Create a copy of the mc2_graph as we want to preserve the original graph
g <- mc2_graph

# Extract the graph with the biggest number of the members (main graph)
V(g)$comp <- components(g)$membership
main <- induced_subgraph(g,V(g)$comp==1)
```

Replot graph to check

```{r}
#| fig-width: 10
#| fig-asp: 1

set.seed(123)

main %>%
  ggraph(layout = 'kk') +
  geom_edge_link(aes(width=weight,
                     colour = factor(year)),
                 alpha=0.2) +
  scale_edge_width(range = c(1, 5)) +
  geom_node_circle(aes(r = 0.2, fill='grey' ),alpha=0.8) + 
  #geom_node_text(aes(label = row_id, size=0.8), colour = "black") +
  theme_graph() +
  theme(legend.position = "top") +
  labs(title = 'The Main Network takes years to build up',
       subtitle = "The graph shows the year which the links between entites was established",
       caption = "Edge records for HS Code starting with '1604' and '1605' seres")
```

```{r}
# Convert tbl_graph to igraph object
igraph_obj <- main

# Compute the number of nodes and edges
num_nodes <- vcount(igraph_obj)
num_edges <- ecount(igraph_obj)

# Print the results
df <- data.frame(Num_of_Nodes = num_nodes, Num_of_Edges = num_edges)

print(df)
```

The graph above shows that the main network for prepared and preserved seafood between the 151 entities takes years to develop.

In the next section, we will take a deeper look at the evolution of the network, to understand how it has grown over the 7 years between entities in the industry. Before we begin, it's crucial that we understand the visual cues that will be used so that we can appreciate the graphs

| Visual Cue    | Sample Image                                           | What it means                                                                                                                                                                                                                 |
|-----------------|-----------------|---------------------------------------|
| Edges         |                                                        |                                                                                                                                                                                                                               |
| \- Arrow head | ![](images/paste-9DA31A2B.png){width="94" height="34"} | Refers to the direction in which shipment is made, A sends goods to B.                                                                                                                                                        |
| \- Edge width | ![](images/paste-2FB7AC7F.png){width="92"}             | There are more transactions between A and D than between A and B.                                                                                                                                                             |
| \- Edge color | ![](images/paste-CA5DD6C3.png){width="96"}             | Different seafood products (based on HS Code) are transacted between A and B, and A and D.                                                                                                                                    |
| Nodes         |                                                        |                                                                                                                                                                                                                               |
| \- Color      | ![](images/paste-DE84572D.png){width="149"}            | Entities that supply seafood do not usually re-sell them. Hence, each node is either a supplier or buyer. Bright green means large supplier and this goes on to the other spectrum of bright red, which relates to big buyer. |
| \- Label      | ![](images/paste-28D55782.png){width="82"}             | The label in the node is a reference for the entity involved. Only more active nodes (based on in-degree and out-degree centrality) are labelled.                                                                             |

We create 2 functions to:

-   Plot the graph for each year

-   Compute the number of nodes and links involved, cumulatively since 2028.

```{r}
#
create_graph <- function(data, range, title) {
  
  set.seed(123)
  
  g <- data %>%
    as_tbl_graph() %>%
    activate(edges) %>%
    filter(year %in% range) %>%
    activate(nodes) %>%
    mutate(
      in_deg_norm = ifelse(in_deg_centrality == 0, 0, (in_deg_centrality - min(in_deg_centrality)) / (max(in_deg_centrality) - min(in_deg_centrality)) + 1),
      out_deg_norm = ifelse(out_deg_centrality == 0, 0, (1 - (out_deg_centrality - min(out_deg_centrality)) / (max(out_deg_centrality) - min(out_deg_centrality))))
    ) %>%
    mutate(combined_in_out_deg = in_deg_norm + out_deg_norm) %>%
    mutate(row_id = ifelse((combined_in_out_deg>=1.2) | (combined_in_out_deg <=0.8),row_id,""))
  
  Isolated <- which(degree(g) == 0)
  g2 <- delete.vertices(g, Isolated)
  
  g2 %>%
    as_tbl_graph() %>%
    ggraph(layout = 'kk') +
    geom_edge_link(aes(), alpha = 0.5) +
    geom_edge_fan(
      aes(color = short_desc),
      arrow = arrow(length = unit(2, 'mm')),
      end_cap = circle(3, 'mm'),
      start_cap = circle(3, 'mm')
    ) +
    geom_node_circle(aes(fill = combined_in_out_deg,r = 0.2 ),alpha=0.8) +
    scale_fill_gradient2(low = "green", mid = "gray", high = "red", midpoint = 1) +
    geom_node_text(aes(label = row_id, size=0.8), colour = "black") +
    theme_graph() +
    theme(legend.position = "top") +
    labs(title = title)
}

# Function to compute the nodes and links

cal_node_edges <- function(data, range) {
  # Convert tbl_graph to igraph object
  
  g <- data %>%
    as_tbl_graph() %>%
    activate(edges) %>%
    filter(year %in% range)
  
  Isolated <- which(degree(g) == 0)
  igraph_obj <- delete.vertices(g, Isolated)
  
  # Compute the number of nodes and edges
  num_nodes <- vcount(igraph_obj)
  num_edges <- ecount(igraph_obj)
  
  # Print the results
  df <- data.frame(Num_of_Nodes = num_nodes, Num_of_Edges = num_edges)
  
  print(df)
}
```

```{r}
range <- c(2028)

cal_node_edges(main,range)
```

Temporal Analysis of Individuals and between entities

::: panel-tabset
## 2028

```{r}
#| fig-width: 10
#| fig-asp: 1

range <- c(2031)

create_graph(main,range,"2028: Trading Occurred Among 9 Entity Clusters") +
  labs(subtitle="Only 4 categories of seafood were transacted",
       caption = "Unconnected entities have been removed " )
```

```{r}
cal_node_edges(main,range)
```

## 2029

```{r}
#| fig-width: 10
#| fig-asp: 1

range <- c(2028,2029)

create_graph(main,range,"2029: More New Traders Joined The Network") +
  labs(subtitle="This resulted in the 3 largest clusters in 2028 merging to form the largest network",
       caption = "Unconnected entities have been removed " )
```

```{r}
cal_node_edges(main,range)
```

## 2030

```{r}
#| fig-width: 10
#| fig-asp: 1

range <- c(2028,2029,2030)

create_graph(main,range,"2030: Tier 2 Buyer ID 38 joined the Main Network") +
  labs(subtitle="The Main Network contined to grow, with only 4 disjointed clusters from 2018 remaining",
       caption = "Unconnected entities have been removed " )
```

```{r}
cal_node_edges(main,range)
```

## 2031

```{r}
#| fig-width: 10
#| fig-asp: 1

range <- c(2028,2029,2030, 2031)

create_graph(main,range,"2031: Y-o-Y Increase In Number of New Entity and Transation Slowed Down") +
  labs(subtitle="This correlates with the lower transaction volume in 2031",
       caption = "Unconnected entities have been removed " )
```

```{r}
cal_node_edges(main,range)
```

## 2032

```{r}
#| fig-width: 10
#| fig-asp: 1

range <- c(2028,2029,2030, 2031, 2032)

create_graph(main,range,"2032: Big Suppliers ID 61 and 124 were Closer, Connected by Buyer ID 135") +
  labs(subtitle="This resulted in the main network becoming more compact",
       caption = "Unconnected entities have been removed " )
```

```{r}
cal_node_edges(main,range)
```

## 2033

```{r}
#| fig-width: 10
#| fig-asp: 1

range <- c(2028,2029,2030, 2031, 2032, 2033)

create_graph(main,range,"2032: THe Big Players Took Centre-stage in the Main Network, Asserting Their Influence")+
  labs(subtitle="The 9 clusters in 2028 were merged into the Main Network",
       caption = "Unconnected entities have been removed " )
```

```{r}
cal_node_edges(main,range)
```

## 2034

```{r}
#| fig-width: 10
#| fig-asp: 1

range <- c(2028,2029,2030, 2031, 2032, 2033, 2034)

create_graph(main,range,"2034: 2nd Tier Suppliers Took Over the  Centre of the Network") +
  labs(subtitle="These suppliers could provide to multiple buyers, marginalising the influence of big suppliers")
```

```{r}
cal_node_edges(main,range)
```
:::

**Identifying the types of business relationship patterns between entities**

We have discussed the more prominent entities in our network of interest. Let's take a look who they are.

The bigger buyers are:

```{r}
nodes_active <- main %>%
  as_tbl_graph() %>%
  activate(nodes) %>%
  mutate(
      in_deg_norm = ifelse(in_deg_centrality == 0, 0, (in_deg_centrality - min(in_deg_centrality)) / (max(in_deg_centrality) - min(in_deg_centrality)) + 1),
      out_deg_norm = ifelse(out_deg_centrality == 0, 0, (1 - (out_deg_centrality - min(out_deg_centrality)) / (max(out_deg_centrality) - min(out_deg_centrality))))
    ) %>%
    mutate(combined_in_out_deg = in_deg_norm + out_deg_norm) %>%
  as_tibble()

bigger_buyers <- nodes_active %>%
  filter(combined_in_out_deg>=1.2) %>%
  arrange(desc(in_deg_centrality)) %>%
  select(row_id,id, shpcountry, rcvcountry, in_deg_centrality)

bigger_buyers
```

The bigger suppliers are:

```{r}
bigger_suppliers <- nodes_active %>%
  filter(combined_in_out_deg<=0.8) %>%
  arrange(desc(out_deg_centrality)) %>%
  select(row_id,id, shpcountry, rcvcountry, out_deg_centrality)

bigger_suppliers
```

We will take 2 players from the buyer and supplier group to understand the business relationship and patterns. We will also construct an interactive network.

```{r}
# Prepare the edge data set
edges_aggregated <- main %>%
  as_tbl_graph() %>%
  activate(edges) %>%
  as_tibble() %>%
  mutate(title = paste('Count = ',weight,'<br>HSCODE =', short_desc),
         value = weight)
         #value = weight, label = paste(short_desc)) 

  

# define grpuping based on the value of combined_in_out_degree

cut_breaks <- c(0, 0.5, 0.9,1.1, 1.5,2)
cut_labels <- c('1 High Out-Degree','2 Medium Out-Degree','3 Low Degree','4 Medium Out-Degree','5 High Out-Degree' )

nodes_active <- nodes_active[,-1] %>%
  mutate(categories=cut(combined_in_out_deg, breaks = cut_breaks, labels = cut_labels, include.lowest = TRUE)) %>%
  # Requirement of visNetwork to name grouping column as such
  rename(group = categories) %>%
  mutate(id = row_number()) %>%
  mutate(title = paste(label,"<br>Rcv Ctry =", rcvcountry,'<br>Shp Ctry =',shpcountry))
```

![](images/paste-602D9612.png){fig-align="center" width="549"}

```{r}
# Plot the intereactive graph
visNetwork(nodes_active,
           edges_aggregated,
          main = "Transaction graph grouped by Deg centrality intervals",
           height = "500px", width = "100%") %>%
  visIgraphLayout(layout = "layout_with_kk") %>%
  #visNodes(shape = 'dot', value = 'pagerank') %>%
  visEdges(arrows = 'to',
           smooth = list(enables = TRUE,
                         type= 'continuous'),
           shadow = FALSE,
           dash = FALSE) %>%
  visOptions(highlightNearest = list(enabled = T, degree = 1, hover = T),
             nodesIdSelection = TRUE,
             selectedBy = "group") %>%
  visGroups(
    groupname = '1 High Out-Degree',
    color = "#20E620")  %>%
  visGroups(
    groupname = '2 Medium Out-Degree',
    color = "#B6D7A8") %>%
  visGroups(
    groupname = '3 Low Degree',
    color = "#666666") %>%
  visGroups(
    groupname = '4 Medium Out-Degree',
    color = "#EA9999")  %>%
  visGroups(
    groupname = '5 High Out-Degree',
    color = "#E00000")  %>%
  visInteraction(hideEdgesOnDrag = TRUE) %>%
  visLegend(enabled=F) %>%
  visLayout(randomSeed = 123)
```

**Big Buyer 1: Volga River LLC Enterprises (Volga)**

Buyer Pattern: Only Buys from Bigger Suppliers

![](images/paste-A218AB55.png){fig-align="left" width="514"}

Volga, an entity that is probably based in Oceanus, has buying tunas from bigger suppliers based in other countries such as Mawazams and Merigrad. Given these, Volga is likely a company importing seafood. The businesses **specialises in sourcing and importing tunas** from suppliers located in other countries. They establish relationships with overseas seafood suppliers, which can include seafood processors, fishing companies, or seafood farms.

A check on the other exports shows that Volga does not export tunas overseas.

![](images/paste-61CEFB59.png)

**Big Buyer 2: hǎi dǎn Corporation Wharf (HD)**

Buying Pattern: Buys from a variety of sources, bigger and small suppliers

![](images/paste-3FB051B4.png){width="581"}

As seen from the image, HD sources its goods and products from many sources and suppliers. Unlike Volga, HD deals with a variety of seafood such as shrimps, tunas, other crustaceans from other countries.

A check on the edge records shows that starting in 2034, HD has exported a variety of seafood products overseas

![](images/paste-EF815DED.png)

Given this profile, HD could be a seafood trading company or seafood brokerage. Seafood trading companies act as intermediaries between fishing boats, seafood suppliers, and customers. They purchase seafood directly from fishing boats locally and may also source seafood products from overseas suppliers. In addition, seafood trading companies often cater to a wide range of customers, including wholesalers, retailers, restaurants, and other food service providers.

**Big Supplier 1: Estrella de la Costa SRL (Estrella)**\

Selling Pattern (more than badminton): Supplies a variety of seafood to various customers internationally

![](images/paste-3EFBB095.png){width="676"} Estrella's businesses is very similar to that of HD's. It is a large trader of seafood products, with 8 of the 9 customers shown above coming from Oceanus.

A check on the edge records shows that it receives a variety of products from other countries as well

![](images/paste-08BB43BE.png)

**Big Supplier 2: LLC S.A. de C.V. (LLC)**

Selling Pattern: Providing crustaceans to just a handful of buyers

\
![](images/paste-4FDB3118.png){width="660"}

With the available information, LLC is likely a seafood exporter or seafood trading company. These businesses specialize in sourcing, purchasing, and distributing various types of seafood, including crustaceans like lobsters, crabs, shrimp, and crayfish, to customers worldwide. Given the limited imports based on the edges data (as shown in the table below), LLC probably deals more with with local fishermen, aquaculture farms, or seafood processors to secure a steady supply of crustaceans.

![](images/paste-BCDC589A.png)\

Conclusion

This analysis focuses on a subset of edge transactions that involve processed or preserved seafood products, based on their HS codes. By doing so, we can reveal the trading patterns of various trading entities and the business models they adopt. Creating meaningful network graphs is a challenging task that requires a lot of time and effort to explore and experiment with different options. However, the benefit is that we can discover patterns that are not easily visible using other types of visualisation.

References

-   Harshita Kanodia (June 2022), IUU Fishing in the Indian Ocean: A Security Threat. Diplomatist, https://diplomatist.com/2022/06/09/lets-catch-the-big-fish/

-   Intro to tidygraph and ggraph, [Intro to tidygraph and ggraph (jeremydfoote.com)](https://jeremydfoote.com/Communication-and-Social-Networks/resources/ggraph_walkthrough.html)

-   Jordan Ong Zhi Rong (5-Jun-2022), Take-Home Exercise 6, [Take-Home Exercise 6 (isss608-jordan-va.netlify.app)](https://isss608-jordan-va.netlify.app/th_ex6/th_ex6.html)

-   Wang Xuze (20-Nov-2019), IS428 - DataViz Makeover 2, [RPubs - IS428 - DataViz Makeover 2 - Xuze](https://rpubs.com/Xuze/Makeover2)

-   Options for visNetwork, an R package for interactive network visualisation, [Options (datastorm-open.github.io)](https://datastorm-open.github.io/visNetwork/options.html)

*P.S. \> I would like to express my gratitude to my course instructor who offered invaluable guidance during the analysis process. Also a shout out to my 2 groupmates who provided good ideas to tackle this task.*
