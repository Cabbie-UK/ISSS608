---
title: "FishEye Knowldge Graph: Identify Temporal Patterns of individual entities and between entities"
subtitle: "VAST Chaellenge 2023: Mini-Challenge 2"
author: "KB"
date: last-modified
editor: visual
execute:
  freeze: auto 
  warning: false
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    code-line-numbers: true
    toc-depth: 4
---

(First Published: May 28, 2023)

## Load all relevant packages

```{r}
pacman::p_load(igraph, tidygraph, ggraph, visNetwork, lubridate, clock,               tidyverse, graphlayouts,jsonlite, plotly, patchwork, knitr, kableExtra, igraph, ggdist, heatmaply)

options(scipen = 999, digits = 15)
```

import data

```{r}
#| eval: false
mc2 <- fromJSON("data/mc2_challenge_graph.json")
```

Extract the nodes info from mc2 data frame

```{r}
#| eval: false
mc2_nodes <- as_tibble(mc2$nodes) %>%
  select(id, shpcountry, rcvcountry)
```

-   id \-- Name of the company that originated (or received) the shipment

-   shpcountry \-- Country the company most often associated with when shipping

-   rcvcountry \-- Country the company most often associated with when receiving

## Read the original nodes table

We will store mc2_nodes in rds format for ease of subsequent retrieval. This code need only be executed once and henece. Thereafter we will reload the mc2_nodes dataframe again

```{r}
# write_rds(mc2_nodes, "data/mc2_nodes.rds")
mc2_nodes = read_rds("data/mc2_nodes.rds")
```

Extract the edges info from mc2 data frame

```{r}
#| eval: false

mc2_edges <- as_tibble(mc2$links) %>%
  select(source, target, arrivaldate, hscode, valueofgoods_omu, volumeteu, weightkg,  valueofgoodsusd)
```

-   arrivaldate \-- Date the shipment arrived at port in YYYY-MM-DD format.

-   hscode \-- Harmonized System code for the shipment. Can be joined with the hscodes table to get additional details.

-   valueofgoods_omu \-- Customs-declared value of the total shipment, in Oceanus Monetary Units (OMU)

-   volumeteu \-- The volume of the shipment in 'Twenty-foot equivalent units', roughly how many 20-foot standard containers would be required. (Actual number of containers may have been different as there are 20ft and 40ft standard containers and tankers that do not use containers)

-   weightkg \-- The weight of the shipment in kilograms (if known)

## Read the original edge table

Also store the mc2_edge info in native rds format.

```{r}
#| eval: false

#write_rds(mc2_edges, "data/mc2_edges.rds")
mc2_edges <- read_rds("data/mc2_edges.rds") %>%
  mutate(arrivaldate = as.Date(arrivaldate, format = "%Y-%m-%d"))
```

Aggregate the weight information between each pair of notes and by the relationship type

Get summary stats on the edge data frame

```{r}
#| eval: false

summary(mc2_edges)
```

Remove likely duplicate records from edges

```{r}
#| eval: false

# Check for the presence of duplicate edge 
paste(sum(duplicated(mc2_edges)),"duplicate records.")
```

We are unsure of the reasons behind the duplicate records and do not discount the possibility that they could be genuine. On balance, we find it unlikely that duplicate records exist for every day, with same weight and among the same pair of entities. Hence, we will use the `distinct()` function on the edge data to only retain only unique edge records for our analysis.

```{r}
#| eval: false
#| 
mc2_edges_unique <- mc2_edges %>%
  distinct()

summary(mc2_edges_unique)
```

**Identifying edge records that relate to the fishing industry**

We extract the top 5 HS code used for the edge records and match against the [HS Nomenclature 2022](https://www.wcoomd.org/en/topics/nomenclature/instrument-and-tools/hs-nomenclature-2022-edition/hs-nomenclature-2022-edition.aspx) available at World Customs Organisation (WCO)'s website, supplemented by the HSN Code List that is found on [Connect2India](https://connect2india.com/hs-classification.html) website.

```{r}
#| eval: false

hscode_count <- mc2_edges_unique %>%
  group_by(hscode) %>%
  summarise(count=n()) %>% 
  ungroup 

head(hscode_count[order(-hscode_count$count), ],n=5)
```

| S/No. | HS Code | Description                                                                                                                                                                                         |
|------------------|------------------|------------------------------------|
| 1     | 306170  | Fish and crustaceans, molluscs and other aquatic invertebrates.                                                                                                                                     |
| 2     | 950300  | Tricycles, scooters, pedal cars and similar wheeled toys; dolls' carriages; dolls; other toys; reduced-size ("scale") models and similar recreational models, working or not; puzzles of all kinds. |
| 3     | 870899  | Other parts and accessories of the motor vehicles                                                                                                                                                   |
| 4     | 611020  | Cotton jerseys, pullovers, cardigans, waistcoats and similar articles, knitted or crocheted.                                                                                                        |
| 5     | 940360  | Other wooden furniture                                                                                                                                                                              |

: From the above, it is obvious not all transactions relate to fishing, We scanned WCO's HS Nomenclature 2022 edition and identified a list 46 HS codes which are associated with fish or the fishing industry and import them in our work environment,

```{r}
#| eval: false

hscode_fish <- read_csv('data/lookup_hscode.csv', show_col_types = FALSE ) %>%
  mutate(hscode = as.character(hscode))
```

Next, we will use this list to extract edge records related to fish industry.

```{r}
#| eval: false

mc2_edges_fish <- mc2_edges_unique %>%
  filter(hscode %in% hscode_fish$hscode) %>%
  # further filter by code '1604','1605 for fish products
  filter(substr(hscode,start = 1,stop=4) %in% c('1604','1605'))
```

We do a frequency count by hscode to understand the volume for each hscode, the subset contains 30 hscodes pertaining to different types of seafood.

**Prepare the Edges for Analysis**

Group edges by source, target, date, and aggregate by count ( which will be renamed as weight), sum of weight, sum of value

```{r}
#| eval: false

# minimum count (or weight) cut-off for a substantial relationship to exist over 7 years
cut_off = 20


# group by edges 
mc2_edges_aggregated <- mc2_edges_fish %>%
  mutate(weeknumber = isoweek(arrivaldate),
         year_month = format(arrivaldate,"%Y-%m"),
         year = year(arrivaldate)) %>%
  group_by(source,target,hscode, year_month, year) %>%
  summarise(weight=n(),weight_sum = sum(weightkg),value_goods_sum =sum(valueofgoodsusd, na.rm = TRUE)) %>%
  filter(source != target) %>%
  filter(weight>cut_off) %>%
  ungroup %>%
  inner_join(select(hscode_fish, hscode, short_desc), by = "hscode")

# Save a copy of the edge file
write_rds(mc2_edges_aggregated, "data/mc2_edges_aggregated.rds")

```

```{r}
#| echo: true

# load the edge file
mc2_edges_aggregated = read_rds("data/mc2_edges_aggregated.rds")
```

y-o-y plot

```{r}
weight_yoy = ggplot(mc2_edges_aggregated, aes(x= as.factor(year), y = weight_sum/1000000)) +
  geom_col() +
  #geom_text(aes(label = weight_sum), vjust = -0.5,color='white') +
  labs(x = "Year", y = "Total Weight(kg in millions") +
  ggtitle("Total Weight by Year")

count_yoy = ggplot(mc2_edges_aggregated, aes(x= as.factor(year), y = weight)) +
  geom_col() +
  #geom_text(aes(label = weight_sum), vjust = -0.5,color='white') +
  labs(x = "Year", y = "Total Transactions") +
  ggtitle("Total Transactions by Year")

value_yoy = ggplot(mc2_edges_aggregated, aes(x= as.factor(year), y = value_goods_sum/1000000)) +
  geom_col() +
  #geom_text(aes(label = weight_sum), vjust = -0.5,color='white') +
  labs(x = "Year", y = "Total Value (USD in millions") +
  ggtitle("Total Value by Year")


(count_yoy + weight_yoy)/value_yoy
```

**Prepare the nodes for Analysis**

The nodes within the node file must be unique and therefore the `filter` function is used to extract only the nodes that appear based on the *source* and *target*.

```{r}
#| eval: false

mc2_nodes_aggregated <- mc2_nodes %>%
  filter(id  %in% c(mc2_edges_aggregated$source, mc2_edges_aggregated$target)) %>%
  # Duplicate the id column as this name will be replaced once we convert to when we apply tbl_graph()
  mutate(label = id) %>%
  mutate(row_id = row_number()) %>%
  distinct() 

# Replace with NA values in shpcountry and rcvcountry to prevent downstream issue
mc2_nodes_aggregated <- replace(mc2_nodes_aggregated, is.na(mc2_nodes_aggregated), 'unknown')

# Save a copy of the nodes file
write_rds(mc2_nodes_aggregated, "data/mc2_nodes_aggregated.rds")
```

```{r}
#| echo: true

# load the node file
mc2_nodes_aggregated = read_rds("data/mc2_nodes_aggregated.rds")
```

**Prepare the tbl_graph_object**

```{r}
mc2_graph <- tbl_graph(nodes = mc2_nodes_aggregated,
                           edges = mc2_edges_aggregated, 
                           directed = TRUE)
```

**Derive centrality measures for nodes**

Since this is a directed graph, will compute the in-degree centrality, out-degree centrality, closeness and betweenness measures for the nodes.

```{r}
mc2_graph <- mc2_graph %>%
  activate(nodes) %>% 
  mutate(
          in_deg_centrality = round(centrality_degree(weights = weight, mode = "in", loops = FALSE),3),
          out_deg_centrality = round(centrality_degree(weights = weight, mode = "out", loops = FALSE),3),
          out_deg_closeness = round(centrality_closeness(weights=weight,mode='out',normalized = TRUE),3),
          in_deg_closeness = round(centrality_closeness(weights=weight,mode='in',normalized = TRUE),3)) 

#%>%
  # mutate(combined_degree = in_deg_centrality - out_deg_centrality) %>%
  # mutate(combi_norm_degree =((combined_degree-min(combined_degree))/(max(combined_degree)-min(combined_degree)) )*100) 
           
```

Charting a plot

```{r}
set.seed(123)

mc2_graph %>%
  ggraph(layout = 'fr') +
  geom_edge_link(aes(width=weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes())
```

Remove disconnected nodes and focus on the main graph

```{r}
# Create a copy of the mc2_graph as we want to preserve the original graph
g <- mc2_graph

# Extract the graph with the biggest number of the members (main graph)
V(g)$comp <- components(g)$membership
main <- induced_subgraph(g,V(g)$comp==1)
```

Replot graph to check

```{r}
#| fig-width: 10
#| fig-asp: 1

set.seed(123)

main %>%
  ggraph(layout = 'kk') +
  geom_edge_link(aes(width=weight,
                     colour = factor(year)), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes()) +
  scale_color_viridis() +
  theme_graph()
```

```{r}
# Convert tbl_graph to igraph object
igraph_obj <- main

# Compute the number of nodes and edges
num_nodes <- vcount(igraph_obj)
num_edges <- ecount(igraph_obj)

# Print the results
df <- data.frame(Num_of_Nodes = num_nodes, Num_of_Edges = num_edges)

kable(head(df), format = 'html') 
```

```{r}
#
create_graph <- function(data, range, title) {
  
  set.seed(123)
  
  g <- data %>%
    as_tbl_graph() %>%
    activate(edges) %>%
    filter(year %in% range) %>%
    activate(nodes) %>%
    mutate(
      in_deg_norm = ifelse(in_deg_centrality == 0, 0, (in_deg_centrality - min(in_deg_centrality)) / (max(in_deg_centrality) - min(in_deg_centrality)) + 1),
      out_deg_norm = ifelse(out_deg_centrality == 0, 0, (1 - (out_deg_centrality - min(out_deg_centrality)) / (max(out_deg_centrality) - min(out_deg_centrality))))
    ) %>%
    mutate(combined_in_out_deg = in_deg_norm + out_deg_norm) %>%
    mutate(row_id = ifelse((combined_in_out_deg>=1.6) | (combined_in_out_deg <=0.4),row_id,""))
  
  Isolated <- which(degree(g) == 0)
  g2 <- delete.vertices(g, Isolated)
  
  g2 %>%
    as_tbl_graph() %>%
    ggraph(layout = 'kk') +
    geom_edge_link(aes(), alpha = 0.5) +
    geom_edge_fan(
      aes(color = short_desc),
      arrow = arrow(length = unit(2, 'mm')),
      end_cap = circle(3, 'mm'),
      start_cap = circle(3, 'mm')
    ) +
    geom_node_circle(aes(fill = combined_in_out_deg,r = 0.2 ),alpha=0.8) +
    scale_fill_gradient2(low = "green", mid = "gray", high = "red", midpoint = 1) +
    geom_node_text(aes(label = row_id, size=0.8), colour = "black") +
    theme_graph() +
    theme(legend.position = "top") +
    labs(title = title)
}


```

```{r}
#| fig-width: 10
#| fig-asp: 1

range <- c(2028, 2029,2030,2031,2032,2033,2034)

create_graph(main,range,"Main Network of the Trading Entities in 2034")
```

```{r}


```

Temporal Analysis of Individuals and between entities

::: panel-tabset
## 2028

```{r}
#| fig-width: 10
#| fig-asp: 1

range <- c(2028)

create_graph(main,range,"2028")
```

```{r}

```

test

-   ttt

-   tt

## 2029

```{r}
#| fig-width: 10
#| fig-asp: 1

range <- c(2028,2029)

create_graph(main,range,"2029")
```

## 2030

```{r}
#| fig-width: 10
#| fig-asp: 1

range <- c(2028,2029,2030)

create_graph(main,range,"2030")
```

## 2031

```{r}
#| fig-width: 10
#| fig-asp: 1

range <- c(2028,2029,2030, 2031)

create_graph(main,range,"2031")
```

## 2032

```{r}
#| fig-width: 10
#| fig-asp: 1

range <- c(2028,2029,2030, 2031, 2032)

create_graph(main,range,"2032")
```

## 2033

```{r}
#| fig-width: 10
#| fig-asp: 1

range <- c(2028,2029,2030, 2031, 2032, 2033)

create_graph(main,range,"2033")
```

## 2034

```{r}
#| fig-width: 10
#| fig-asp: 1

range <- c(2028,2029,2030, 2031, 2032, 2033, 2034)

create_graph(main,range,"2034")
```
:::

```{r}

```

Function to plot yearly graph

```{r}

```

```{r}

```

Centrality measures of various transactions

In-degree, Out-Degree, Betweenness Score

```{r}

                                       
```

Top 10 nodes with 'in-degree" scores:

```{r}

```

View Graph Year by year

```{r}
#| fig-height: 20

ggraph(mc2_graph, layout = "nicely") +
  geom_edge_link(aes(width=weight)) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes()) +
  theme_graph() +
  facet_edges(~year,ncol=1)
  

```

```{r}
# mc2_nodes_interactive <- mc2_graph %>%
#  activate(nodes) %>%
#  as_tibble() %>%
#  mutate(title = paste(
#                         '\n In-deg = ',in_deg_centrality, ',',
#                         "\n Pagerank =", pagerank, ',',
#                         "\n Out-deg =", out_deg_centrality))
  
```

\(c\) Prepare the group, size

```{r}
# mc2_nodes_interactive_in <- mc2_graph %>% 
#   activate(nodes) %>%
#   as_tibble() %>%
#   mutate(class = cut_interval(in_deg_centrality, n = 5, 
#                               style = "quantile")) %>%
#   rename(group = class)
```

```{r}
# visNetwork(mc2_nodes_interactive_in,
#            mc2_edges_interactive,
#           main = "Transaction graph grouped by In-Deg centrality intervals",
#            height = "500px", width = "100%") %>%
#   visIgraphLayout(layout = "layout_with_fr") %>%
#   #visNodes(shape = 'dot', value = 'pagerank') %>%
#   visEdges(arrows = 'to',
#            smooth = list(enables = TRUE,
#                          type= 'continuous'),
#            shadow = FALSE,
#            dash = FALSE) %>% 
#   visOptions(highlightNearest = list(enabled = T, degree = 1, hover = T),
#              nodesIdSelection = TRUE,
#              selectedBy = "group") %>%
#   visInteraction(hideEdgesOnDrag = TRUE) %>% 
#   visLegend() %>%
#   visLayout(randomSeed = 123)

```

Graph by out degree

\(a\) Create group

```{r}
# mc2_nodes_interactive_out <- mc2_graph %>% 
#   activate(nodes) %>%
#   as_tibble() %>%
#   mutate(class = cut_interval(out_deg_centrality, n = 5, 
#                               style = "quantile")) %>%
#   rename(group = class)
```

\(b\) Create graph

```{r}
# visNetwork(mc2_nodes_interactive_out,
#            mc2_edges_interactive,
#           main = "Transaction graph grouped by Out-Deg centrality intervals",
#            height = "500px", width = "100%") %>%
#   visIgraphLayout(layout = "layout_with_fr") %>%
#   #visNodes(shape = 'dot', value = 'pagerank') %>%
#   visEdges(arrows = 'to',
#            smooth = list(enables = TRUE,
#                          type= 'continuous'),
#            shadow = FALSE,
#            dash = FALSE) %>% 
#   visOptions(highlightNearest = list(enabled = T, degree = 1, hover = T),
#              nodesIdSelection = TRUE,
#              selectedBy = "group") %>%
#   visInteraction(hideEdgesOnDrag = TRUE) %>% 
#   visLegend() %>%
#   visLayout(randomSeed = 123)
```

Look into the to supplier Playa del Tesoro OJSC

\(a\) Who are its customers

From the map, the sole customer was Fresh Wharf SRL Consulting.

Others include:

```{r}
# mc2_edges_unique %>%
#   filter(source == 'Playa del Tesoro OJSC') %>%
#   group_by(source, target, hscode) %>%
#   summarise(count=n()) %>%
#   arrange(desc(count))
```

Get transactions with Fresh Wharf SRL consulting

```{r}
# playa <- mc2_edges_aggregated %>%
#   filter(source == 'Playa del Tesoro OJSC') %>%
#   mutate(month = substr(year_month,start = 6,stop=7))
# 
# ggplot(playa, 
#        aes(x = month, 
#            y = weight,
#            group = year)) +
#   geom_line() +
#   facet_wrap(~year, ncol=1) +
#   
#   theme_minimal()
```

Heatmap

```{r}
# playa_heatmap <- playa %>%
#   select(year, month, weight) %>%
#   pivot_wider(names_from = month, values_from = weight) 
#   
# 
# playa_heatmap <- replace(playa_heatmap, is.na(playa_heatmap), 0)
# 
# row.names(playa_heatmap) <- playa_heatmap$year
# 
# playa_matrix <- data.matrix(playa_heatmap)
# 
# playa_matrix <- playa_matrix[,-1]
# 
# heatmap(playa_matrix,Rowv=NA, Colv=NA)
```

Look at company Estrella de la Costa SRL

```{r}
# mc2_edges_fish %>%
#   filter(source == 'Estrella de la Costa SRL') %>%
#   group_by(source, target, hscode) %>%
#   summarise(count=n()) %>%
#   arrange(desc(count))
```

Check the trend

```{r}
# estrella <- mc2_edges_aggregated %>%
#   filter(source == 'Estrella de la Costa SRL') %>%
#   inner_join(mc2_nodes, select(id, rcvcountry), by = c('source'='id'))
# 
# ggplot(estrella, 
#        aes(x = year_month, 
#            y = weight,
#            group = target)) +
#   geom_line() +
#   facet_wrap(~target, ncol=1) +
#   
#   theme_minimal()
```

--\>Look at company OceanicOrigin Foods Co Consulting

```{r}
# mc2_edges_fish %>%
#   filter(source == 'OceanicOrigin Foods Co Consulting') %>%
#   group_by(source, target, hscode) %>%
#   summarise(count=n()) %>%
#   arrange(desc(count))
```

check the trend

```{r}
# oceanic <- mc2_edges_aggregated %>%
#   filter(source == 'OceanicOrigin Foods Co Consulting') %>%
#   inner_join(mc2_nodes, select(id, rcvcountry), by = c('source'='id'))
# 
# ggplot(oceanic, 
#        aes(x = year_month, 
#            y = weight,
#            group = target)) +
#   geom_line() +
#   facet_wrap(~target, ncol=1) +
#   theme_minimal()
```

Code block

```{r}

```

Code block

```{r}

```

Code block

```{r}



```

Code block

```{r}

```

Code block

```{r}

```

References

-   Harshita Kanodia (June 2022), IUU Fishing in the Indian Ocean: A Security Threat. Diplomatist, https://diplomatist.com/2022/06/09/lets-catch-the-big-fish/

-   
