[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "Published: 14-Apr-2023"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#learning-outcome",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#learning-outcome",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.1 Learning Outcome",
    "text": "1.1 Learning Outcome\nWe will:\n\nlearn the basic principles and components of ggplot2\ngain hands-on experience plotting functional graphs ✌️"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#getting-started",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#getting-started",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.2 Getting Started",
    "text": "1.2 Getting Started\n\n1.2.1 Install and load the required r libraries\nLoad the tidyverse library. tidyverse is a collection of powerful and popular packages, such as ggplot2, dplyr, in R that are designed to help us work with and manipulate data in a consistent and efficient manner.\n\n\nShow the code\npacman::p_load(tidyverse)\n\n\n\n\n1.2.2 Import the data\nWe import the exam_data.csv data-set. This data-set contains the examination scores of a cohort of Primary 3 students from a local school.\nThere are a total of seven attributes.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\n\nShow the code\nexam_data <- read_csv('data/Exam_data.csv', show_col_types = FALSE )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#introduction-to-ggplot",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#introduction-to-ggplot",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.3 Introduction to ggplot",
    "text": "1.3 Introduction to ggplot\nggplot is an R package for decoratively creating data-driven graphics based on The Grammar of Graphics.\n\n1.3.1 R Base Graphics Vs ggplot\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Base Graphicsggplot\n\n\n\n\nShow the code\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\") + \n  ylab('Frequency') +\n  xlab('Maths score') +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\nBase graphics has a pen on paper model: we can only draw on top of the plot, we cannot modify or delete existing content. There is no (user accessible) representation of the graphics, apart from their appearance on the screen. Base graphics includes both tools for drawing primitives and entire plots. Base graphics functions are generally fast, but have limited scope.\nOn the other hand, ggplot2 has an underlying grammar, based on the Grammar of Graphics (see sections below), that allows us to compose graphs by combining independent components. This makes ggplot2 powerful. Rather than being limited to sets of pre-defined graphics, we can create novel graphics that are tailored to our specific problem."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#grammar-of-graphics",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#grammar-of-graphics",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.4 Grammar of Graphics",
    "text": "1.4 Grammar of Graphics\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) .\nIn brief, the grammar tells us that a graphic maps the data to the aesthetic attributes (colour, shape, size) of geometric objects (points, lines, bars). The plot may also include statistical transformations of the data and information about the plot’s coordinate system. Facetting can be used to plot for different subsets of the data. The combination of these independent components are what make up a graphic.\n\n1.4.1 A Layered Grammar of Graphics\nThe 7 layers are:\n\n\n\n\n\n\nData: Refers to the data-set being plotted\nAesthetics: Use the attributes of the data to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: Represent our data using visual elements such as points, bar or line.\nFacets: Split the data into subsets to create small multiples of the same graph (paneling, multiple plots).\nStatistics:Apply additional statistical transformations that summarise the data (e.g. mean, confidence intervals).\nCoordinates: Define the pane on which data is mapped on the graphic.\nTheme: Modify all non-data components of a plot, such as main title, sub-title, y-aixs title, legend, and background.\n\nThe purpose of each layer (or component) is further discussed below."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#the-data-layer",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#the-data-layer",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.5 The Data Layer",
    "text": "1.5 The Data Layer\nLet us call the ggplot() function, with data argument pointing to the data-set to be used for plotting.\n\n\nShow the code\nggplot(data=exam_data)\n\n\n\n\n\nUnder the hood, a ggplot object is initialized using the data provided. We will need to include 2 other key layers - the aesthetic mappings and geometric layer - to see the plot.\n\n\n\n\n\n\nNote\n\n\n\nIf the data-set is not already a data.frame, it will be converted to one by using the fortify() function."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#the-aesthetic-layer",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#the-aesthetic-layer",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.6 The Aesthetic Layer",
    "text": "1.6 The Aesthetic Layer\nThe aesthetic mappings take attributes of the data and and use them to influence the visual characteristics, such as position, colour, size, shape, or transparency, of the plot.\nAll aesthetics of a plot are specified in the aes() function call. In the later part of this document, we will see that each geom layer can have its own aes specification.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\nThe tick marks and label for the x-axis are displayed."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#the-geometric-layer",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#the-geometric-layer",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7 The Geometric Layer",
    "text": "1.7 The Geometric Layer\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar, column charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (we can access the data to use for these maps by using the map_data() function).\n\n A plot must have at least one geom; there is no upper limit. We can add a geom to a plot using the ’+’ operator.\n\n1.7.1 Geometric Object: geom_bar\nYup, it’s a for a bar chart!\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n1.7.2 Geometric Object: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nDanger\n\n\n\nThe y-axis is not very useful and can be misleading.\n\n\nTo address the above concern, we take the following steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n1.7.3 Geometric Object: geom_histogram\ngeom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\n1.7.4 Modify a geometric object by changing geom()\nThe following arguments of the geom() function can be used:\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThese changes are applied at the specific geom() layer and will not perpertuate when we include another geom() layer.\n\n\n\n\n\n1.7.5 Modify a geometric object by changing aes()\nWe can changes the interior colour of the histogram (i.e. fill) by using sub-group of aes().\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot2 takes care of the details of converting data into aesthetics (e.g., ‘red’, ‘yellow’, ‘green’) with a scale. There is one scale for each aesthetic mapping in a plot. The scale is also responsible for creating a guide, an axis or legend, that allows us to read the plot, converting aesthetic values back into data values.\nIf we want to set an aesthetic to a fixed value, without scaling it, do so in the individual layer outside of aes(). Refer to section 1.7.4.\n\n\n\n\n\n1.7.6 Geometric Object: geom_density\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\nWe can plot two kernel density lines by using colour or fill arguments of aes().\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n1.7.7 Geometric Object: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\nNotches are indentation on the box-plot at the median value to help visually assess whether the medians of distributions differ. The notch indicates a confidence interval around the median, calculated using the median absolute deviation. If the notches of two box plots do not overlap, it suggests that the medians of the two groups are significantly different. We can show the indentation using the notch argument.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n1.7.8 Geometric Object: geom_violin\ngeom_violin is designed for creating violin plot. With ordinary density curves (see section 1.7.6), it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n1.7.9 Geometric Object: geom_point\ngeom_point() is especially useful for creating scatterplot.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n1.7.10 Combine several geom objects\nFor instance, we can plot the data points on the boxplots by using both geom_boxplot() and geom_point().\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#the-statistics-layer",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#the-statistics-layer",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8 The Statistics Layer",
    "text": "1.8 The Statistics Layer\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n1.8.1 Working with the stat() function\nWe can use stat_summary() function to include the mean value on a boxplot.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun =\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n1.8.2 Working with the geom() function\nWe can also use the geom() function to get the same result.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n1.8.3 Add a best fit curve on a scatter-plot\nThe scatter-plot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve using the geom_smooth() function.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default smoothing method used is loess (short for “locally weighted scatter-plot smoothing”). The loess method involves fitting a smooth curve to a scatter-plot of data points, where the curve is weighted to give more emphasis to nearby points and less emphasis to points that are far away.\n\n\nThe default smoothing method can be overridden as shown below. The “lm” method can be used to fit a straight line to a scatterplot of data points. This line represents the best linear approximation of the relationship between the variables and can be used to make predictions or estimate the effect of one variable on the other.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#the-facet-layer",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#the-facet-layer",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9 The Facet Layer",
    "text": "1.9 The Facet Layer\nFaceting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap().\n\n1.9.1 Working with facet_wrap()\nfacet_wrap wraps a 1-d sequence of panels into 2-d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nLet’s do a trellis plot using facet-wrap() for the maths score of each class.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n1.9.1 Working with facet_grid()\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when we have two discrete variables, and all combinations of the variables exist in the data.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n  facet_grid(CLASS~.) +\n  theme(plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), \"cm\"))\n\n\n\n\n\nFrom the above, it’s now more apparent that the maths scores decrease as we move down from Class 3A to Class 3I."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#the-coordinates-layer",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#the-coordinates-layer",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10 The Coordinates Layer",
    "text": "1.10 The Coordinates Layer\nThere are two types of coordinate systems. Linear coordinate systems preserve the shape of geoms:\n\ncoord_cartesian(): the default Cartesian coordinate system, where the 2-d position of an element is given by the combination of the x and y positions.\ncoord_flip(): Cartesian coordinate system with x and y axes flipped.\ncoord_fixed(): Cartesian coordinate system with a fixed aspect ratio.\n\nOn the other hand, non-linear coordinate systems can change the shapes: a straight line may no longer be straight. The closest distance between two points may no longer be a straight line.\n\ncoord_map()/coord_quickmap()/coord_sf(): Map projections.\ncoord_polar(): Polar coordinates.\ncoord_trans(): Apply arbitrary transformations to x and y positions, after the data has been processed by the stat.\n\n\n1.10.1 Working with Coordinates\nBy the default, the bar chart of ggplot2 is in vertical form (i.e. column chart).\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\nWe can flip the horizontal bar chart into vertical bar chart by using coord_flip().\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n1.10.2 Change the y- and x-axis range\nWe can use the coord_caatesian() function to fix both the y-axis and x-axis range from 0-100.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#the-theme-layer",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#the-theme-layer",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.11 The Theme Layer",
    "text": "1.11 The Theme Layer\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\nlabels colour\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n1.11.1 Working with theme\nA horizontal bar chart plotted using various themes.\ntheme_classic() is my favourite! 😜\n\ntheme_gray()theme_bw()theme_classic()theme_minimal()\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#reference",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex1.html#reference",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.12 Reference",
    "text": "1.12 Reference\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale\n\n\n\\(**That's\\) \\(all\\) \\(folks!**\\)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex2.html",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex2.html",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "Published: 20-Apr-2023\nModified: 27-Apr-2023"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex2.html#learning-outcome",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex2.html#learning-outcome",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "2.1 Learning Outcome",
    "text": "2.1 Learning Outcome\nWe will learn to plot charts that are beyond the out-of-the-box offerings from ggplot2. We will explore how to customize and extend ggplot2 with new:\n\nAnnotations\nThemes\nComposite plots"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex2.html#getting-started",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex2.html#getting-started",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "2.2 Getting Started",
    "text": "2.2 Getting Started\n\n2.2.1 Install and load the required r libraries\nInstall and load the the required R packages. The name and function of the new packages that will be used for this exercise are as follow:\n\nggrepel: provides a way to prevent labels from overlapping in ggplot2 plots\nggthemes: provides a set of additional themes, geoms and scales for ggplot2\nhrbrthemes👍🏾: provides another set of visually appealing themes and formatting options for ggplot2\npatchwork👍🏾: provides a way to combine multiple ggplot2 plots into a single figure\n\n\n\nShow the code\npacman::p_load(tidyverse, patchwork, \n               ggthemes, hrbrthemes,\n               ggrepel)\n\n\n\n\n2.2.2 Import the data\nWe will be using the same exam scores data-set that was featured in my Hands-On Ex 1.\n\n\nShow the code\nexam_data <- read_csv('data/Exam_data.csv', show_col_types = FALSE )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex2.html#beyond-ggplot2-annotation",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex2.html#beyond-ggplot2-annotation",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "2.3 Beyond ggplot2 Annotation",
    "text": "2.3 Beyond ggplot2 Annotation\nOne challenge in plotting statistical graph is annotation, especially with large number of data points. The data points overlap and this leads to an ugly chart.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n2.3.1 Working with ggrepel package\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text. We simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel().\ngeom_text_repel() adds text directly to the plot. geom_label_repel() draws a rectangle underneath the text, making it easier to read.\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex2.html#beyond-ggplot2-themes",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex2.html#beyond-ggplot2-themes",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "2.4 Beyond ggplot2 Themes",
    "text": "2.4 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void(). 4 of these themes were featured in my Hands-On-Ex1 page.\n\n\nShow the code\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +  \n  ggtitle(\"Distribution of Maths scores [theme_gray()]\") \n\n\n\n\n\n\n\n\n\n\n\nFor facet or small multiple plots\n\n\n\nConsider using theme_gray(), theme_bw() or theme_light() as they offer bounded axis which helps to compartmentalize the different plots.\n\n\n\n2.4.1 Working with ggthemes package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nCheck out some of the available themes below 👇🏼.\n\nTufteEconomist(Stephen) Few 👍🏾FivethirtyeightGDocs 👍🏾Highcharts 👍🏾\n\n\n\n\nShow the code\np1 <- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\np1 + theme_tufte()\n\n\n\n\n\n\n\n\n\nShow the code\np1 +theme_economist() + scale_colour_economist()\n\n\n\n\n\n\n\n\n\nShow the code\np1 + theme_few() + scale_colour_few()\n\n\n\n\n\n\n\n\n\nShow the code\np1 + scale_color_fivethirtyeight(\"cyl\") + theme_fivethirtyeight()\n\n\n\n\n\n\n\n\n\nShow the code\np1 + theme_gdocs() + scale_color_gdocs()\n\n\n\n\n\n\n\n\n\nShow the code\np1 + theme_hc() + scale_colour_hc()\n\n\n\n\n\n\n\n\nThe package also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\n\n\n2.4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\n\nShow the code\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. It allows us, the data analysts, to focus on the analysis while the package works behind the scene to produce an elegant chart. Consult this vignette to learn more.\n\n\nShow the code\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18, \n              base_size = 15, \n              grid = \"Y\") \n\n\n\n\n\n\n\n\n\n\n\nTweaking the arguments in the theme_ipsum() function\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex2.html#beyond-ggplot2-facet",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex2.html#beyond-ggplot2-facet",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "2.5 Beyond ggplot2 facet",
    "text": "2.5 Beyond ggplot2 facet\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose a figure with multiple graphs. In this section, we will learn how to create a composite plot by combining multiple graphs. First, let us create three statistical graphs.\n\n\nShow the code\np1 <- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np2 <- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np3 <- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\np1\n\n\n\n\n\nShow the code\np2\n\n\n\n\n\nShow the code\np3\n\n\n\n\n\n\n2.5.1 Creating Composite Graphics with pathwork package\nThere are several ggplot2 extensions which provide functions to compose figure with multiple graphs. In this section, we are going to explore patchwork.\nThe patchwork package has a very simple syntax where we can create layouts super easily.\n\nBasic layout: Placing 2 plots side-by-sideDefault layout: Grid SquareChange layout: use plot_layout() function\n\n\n\n\nShow the code\np1 + p2\n\n\n\n\n\n\n\n\n\nShow the code\np1 + p2 + p3 + p1\n\n\n\n\n\n\n\n\n\nShow the code\np1 + p2 + p3 + plot_layout(nrow = 3, byrow = FALSE)\n\n\n\n\n\n\n\n\nWe can use | to place the plots beside each other, while / will stack them\n\n\nShow the code\np1 + p2 / p3\n\n\n\n\n\n\n\nShow the code\n(p1 / p2) | p3\n\n\n\n\n\npatchwork also provides auto-tagging capabilities, in order to identify subplots in text\n\n\nShow the code\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = '1')\n\n\n\n\n\nWe can apply themes to the charts\n\n\nShow the code\npatchwork <- (p1 / p2) | p3\npatchwork & theme_economist()\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top of another plot.\n\n\nShow the code\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1.)\n\n\n\n\n\nRefer to Plot Assembly to learn more about arranging charts using patchwork."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex2.html#references",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex2.html#references",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "2.6 References",
    "text": "2.6 References\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet\n\n\n\\(**That's\\) \\(all\\) \\(folks!**\\)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3a.html",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3a.html",
    "title": "Interactive Data Visualisation with R",
    "section": "",
    "text": "Published: 25-Apr-2023"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3a.html#learning-outcome",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3a.html#learning-outcome",
    "title": "Interactive Data Visualisation with R",
    "section": "3.1 Learning Outcome",
    "text": "3.1 Learning Outcome\nWe will learn to create interactive visuals"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3a.html#getting-started",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3a.html#getting-started",
    "title": "Interactive Data Visualisation with R",
    "section": "3.2 Getting Started",
    "text": "3.2 Getting Started\n\n3.2.1 Install and load the required r libraries\nInstall and load the the required R packages. The name and function of the new packages that will be used for this exercise are as follow:\n\nggiraph: allows interactive graphics to be created using ggplot2\nplotly: creates interactive, web-based graphs using the Plotly.js JavaScript library\nDT: creates interactive tables using the DataTables JavaScript library. It allows data to be displayed in a table with features such as sorting, filtering, pagination, and searching.\n\n\n\nShow the code\npacman::p_load(tidyverse, patchwork, \n               ggiraph, plotly,\n              DT)\n\n\n\n\n3.2.2 Import the data\nWe will be using the same exam scores data-set that was featured in my Hands-On Ex 1.\n\n\nShow the code\nexam_data <- read_csv('data/Exam_data.csv', show_col_types = FALSE )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3a.html#interactive-data-visualisation",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3a.html#interactive-data-visualisation",
    "title": "Interactive Data Visualisation with R",
    "section": "3.3 Interactive Data Visualisation",
    "text": "3.3 Interactive Data Visualisation\n\n3.3.1 Working with ggiraph package\nggiraph is an htmlwidget and a ggplot2 extension. In ggplot2, interactivity can be added to a plot through the use of ggplot geometries. There are 3 arguments that can be used to enable interactivity in ggplot geometries:\n\ntooltip: To display a tooltip when the mouse is hovered over elements of the plot. Tooltips can be customized to include any information that is relevant to the plot.\nonclick: To specify an embedded JavaScript function that is executed when chart element is clicked.\ndata_id: To link a graph element to a record via a data_id. The data_id is a unique identifier for each record in the data, and it is used to enable interactivity between the plot and other components of the application.\nWhen used within a Shiny application, elements associated with an id (data_id) can be selected and manipulated on the client and server. The list of selected values will be stored in in a reactive value named [shiny_id]_selected.\n\n\n3.3.1.1 The tooltip argument\nFirst, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Next, girafe() of ggiraph is used to create an interactive Scalable Vector Graphics (SVG) object to display the plot on a html page.\n\n\n\n\n\n\nWhat is a SVG?\n\n\n\nSVG is an XML-based format that is commonly used for web graphics and interactive visualizations because it allows graphics to be resized without losing quality.\n\n\n👇Interactivity: By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\nShow the code\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    #  Specifies that the dots will be stacked on top of each other when they overlap\n    stackgroups = TRUE, \n    binwidth = 1,\n    # Specifies the method for plotting the dot plot\n    method = \"histodot\") +\n  # NULL: Specifies that the y-axis label will be blank.\n  # breaks = NULL: Specifies that no tick marks will be displayed on the y-axis\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n\ngirafe(\n  # Specifies the ggplot2 plot p that will be converted to an interactive plot using girafe\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\nDisplay more information on tooltip\nHere, we included the student’s class in the tooltip.\nThe first three lines of codes below create a new field called tooltip. Text data in the ID and CLASS fields are assigned to the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 8.\n👇Interactivity: The student’s ID and class are not displayed in the tooltip.\n\n\nShow the code\nexam_data$tooltip <- c(paste0(     #<<\n  \"Name = \", exam_data$ID,         #<<\n  \"\\n Class = \", exam_data$CLASS)) #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), #<<\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\nCustomise Tooltip style\nWe can use opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n👇Check out the formatting style of the tooltip of the 2 sample charts below ,\n\nexam_datamtcars data\n\n\n\n\nShow the code\ntooltip_css <- \"background-color:white; #<<\nfont-style:bold; color:black;\" #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #<<\n    opts_tooltip(    #<<\n      css = tooltip_css)) #<<\n)                             \n\n\n\n\n\n\n\n\n\n\nShow the code\ndataset <- mtcars\ndataset$carname = row.names(mtcars)\n\ngg <- ggplot(\n  data = dataset,\n  mapping = aes(x = wt, y = qsec, color = disp,\n                tooltip = carname, data_id = carname) ) +\n  geom_point_interactive() + theme_minimal()\n\nx <- girafe(ggobj = gg)\nx <- girafe_options(x,\n  opts_tooltip(opacity = .7,\n    offx = 20, offy = -10,\n    use_fill = TRUE, use_stroke = TRUE,\n    delay_mouseout = 1000) )\nx\n\n\n\n\n\n\n\n\n\nRefer to this page to learn more about how to customise girafe animations\nDisplay statistics on tooltip\nIn the following example, a function is used to compute the standard error of the mean math scores. The derived statistics are then displayed in the tooltip.\n🖱️Mouse over the chart to check out the tooltip!\n\n\nShow the code\ntooltip <- function(y, ymax, accuracy = .01) {   #<<\n  mean <- scales::number(y, accuracy = accuracy) #<<\n  sem <- scales::number(ymax - y, accuracy = accuracy) #<<\n  paste(\"Mean maths scores (with standard error):\\n\", mean, \"+/-\", sem) #<<\n} #<<\n\n# Create graph\ngg_point <- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  #<<  after_stat() function specifies that the tooltip should be calculated after the summary statistics are calculated.\n                     tooltip(y, ymax))),  #<<\n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  #<<\n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\n# Generate SVG object\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n3.3.1.2 The onclick argument\nonclick argument of ggiraph provides hotlink interactivity on the web. Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\nShow the code\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              #<<\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                                                                \n\n\n\n\n\n\n\n\n3.3.1.3 The data_id argument\nWe assign the data_id argument to CLASS and when we mouse over a particular student in the chart below, the fellow classmates will also be highlighted.\n🖱️ Mouse over the chart to check out the hover effect!\n\n\nShow the code\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             #<<\n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\nThe default color of hover_css = “fill:orange;”\nCustomise the hover effect\nCSS codes are used to change the highlighting effect.\n🖱️ Mouse over the chart to check out the new hover effect!\n\n\nShow the code\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        #<<\n    opts_hover(css = \"fill: red;\"),  #<<\n    opts_hover_inv(css = \"opacity:0.2;\") #<<\n  )                                      #<<  \n)                                        \n\n\n\n\n\n\nCombine use of tooltip and data_id arguments\nThere are times when we want to combine tooltip and hover effect on an interactive statistical graph. In the following chart, elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\nShow the code\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, #<<\n        data_id = CLASS),#<<              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: red;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\n3.3.1.4 Coordinated multiple views with ggiraph\nWhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the different plots.\npatchwork function will be used inside girafe() function to create the interactive coordinated multiple views.\n\n\n\nShow the code\np1 <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS,\n        data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 <- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS,\n        data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 / p2), #<<\n       width_svg = 6,\n       height_svg = 6,\n       options = list(\n         opts_hover(css = \"fill: orange;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\n\n\n\n3.3.2 Working with plotly package\n\nPlotly’s R graphing library creates interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics.\nDifferent from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n3.3.2.1 Create an interactive scatter plot: plot_ly() function\nThe graph below is plotted using plot_ly().\n\n\nShow the code\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\nIn the next plot, the color argument is mapped to a qualitative visual variable (i.e. RACE). We can hide/unhide the data points for each race by click on their label in the legend.\n\n\nShow the code\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE) #<<\n\n\n\n\n\n\n\ncolors argument is used to change the default colour palette to ColorBrewer colour palette.\n\n\n\nShow the code\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE, \n        colors = \"Set1\") #<<\n\n\n\n\n\n\n\nWe can also customise our own colour scheme and assign it to the colors argument.\n\n\n\nShow the code\npal <- c(\"red\", \"purple\", \"blue\", \"green\") #<<\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE, \n        colors = pal) #<<\n\n\n\n\n\n\n\ntext argument is used to change the default tooltip.\n\n\n\nShow the code\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS,\n        text = ~paste(\"Student ID:\", ID,     #<<\n                      \"<br>Class:\", CLASS),  #<<\n        color = ~RACE, \n        colors = \"Set1\")\n\n\n\n\n\n\n\nlayout argument is used to update the chart title and axes limit.\n\n\n\nShow the code\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS,\n        text = ~paste(\"Student ID:\", ID,     \n                      \"<br>Class:\", CLASS),  \n        color = ~RACE, \n        colors = \"Set1\") %>%\n  layout(title = 'English Score versus Maths Score ', #<<\n         xaxis = list(range = c(0, 100)),             #<<\n         yaxis = list(range = c(0, 100)))             #<<\n\n\n\n\n\n\nTo learn more about layout, visit this link.\n\n\n3.3.2.2 Create an interactive scatter plot: ggplotly() funciton\nWe just need to include the original ggplot2 graph in the ggplotly() function.\n\n\nShow the code\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(dotsize = 1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p) #<<\n\n\n\n\n\n\n3.3.2.3 Coordinated Multiple Views with plotly\n\nWe use subplot() of plotly package to place two scatterplots side-by-side.\n\n\n\nShow the code\np1 <- ggplot(data=exam_data, \n              aes(x = MATHS,\n                  y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),            #<<\n        ggplotly(p2))            #<<\n\n\n\n\n\n\n\nWe use the highlight_key() of plotly package to coordinate the selection of data points across two scatterplots.\n\n🖱️Click on the data point of one of the charts and we will see the same data point being highlighted in the other chart\n\n\nShow the code\nd <- highlight_key(exam_data)  #<<\n\np1 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\n\n\n\n\nHow highlight_key() function works\n\n\n\n\nThe function creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk\n\n\n\n\n\n\n3.3.3 Working with crosstalk package\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n3.3.3.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\n\nShow the code\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\n3.3.3.2 Linked brushing: crosstalk method\nThings to note when implementing coordinated brushing:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document.\n\n👇Select a cluster of points from the scatterplot and the data table below will return the records of the selected data points\n\n\nShow the code\nd <- highlight_key(exam_data) \n\np <- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg <- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d),\n                  widths = 12)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3a.html#reference",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3a.html#reference",
    "title": "Interactive Data Visualisation with R",
    "section": "3.4 Reference",
    "text": "3.4 Reference\n\n3.4.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n3.4.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels\n\n\n\\(**That's\\) \\(all\\) \\(folks!**\\)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3b.html",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3b.html",
    "title": "Animated Statistical Graph with R",
    "section": "",
    "text": "Published: 26-Apr-2023"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3b.html#learning-outcome",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3b.html#learning-outcome",
    "title": "Animated Statistical Graph with R",
    "section": "4.1 Learning Outcome",
    "text": "4.1 Learning Outcome\nWhen telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics.We will learn to create animated data visualisation. At the same time, we will also learn to reshape, process, wrangle and transform the data-set.\n\n4.1.1 Basic concept of animation\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot, which is built using a relevant subset of the data-set. Motion (and the animated effect) is rendered when the stitched plots are displayed sequentially. \n\n\n4.1.2 Terminologies\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminologies that will be used:\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, we can specify the duration of each frame, the easing function used to transit between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nWhen do we use animated graphs?\n\n\n\nBefore we start making animated graphs, we should first ask ourselves: Does it makes sense to go through the effort? If we are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if we are giving a presentation, a few well-placed animated graphics can help an audience connect with our topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3b.html#getting-started",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3b.html#getting-started",
    "title": "Animated Statistical Graph with R",
    "section": "4.2 Getting Started",
    "text": "4.2 Getting Started\n\n4.2.1 Install and load the required r libraries\nInstall and load the the required R packages. The name and function of the new package that will be used for this exercise are as follow:\n\ngganimate: creates animated graphics, such as line charts, bar charts, and maps, by specifying a series of frames with data and aesthetics that change over time\ngifski: converts images to GIF animations using pngquant’s efficient cross-frame palettes and temporal dithering with thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\nreadxl: makes it easy to get data out of Excel and into R\n\n\n\nShow the code\npacman::p_load(tidyverse,plotly,gganimate, gifski, gapminder, gapminder,readxl)\n\n\n\n\n4.2.2 Import the data\nThe Data worksheet from GlobalPopulation Excel workbook will be used. We will use the following functions to process the data-set:\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_if() of dplyr package is used to a subset of columns in a data frame based on a logical condition\nmutate() of dplyr package is used to convert data values of Year field into integer.\n\n\n\nShow the code\ncol <- c(\"Country\", \"Continent\")\nglobalPop <- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %>%\n  mutate_if(is.character, as.factor) %>%  \n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3b.html#animated-data-visualisation",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3b.html#animated-data-visualisation",
    "title": "Animated Statistical Graph with R",
    "section": "4.3 Animated data visualisation",
    "text": "4.3 Animated data visualisation\nThe basic ggplot2 functions are used to create the static bubble plot.\n\n\nShow the code\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nThe graph looks awful…\n\n\n\nThis is because all data points for all featured countries across all years were plotted on a single chart. Read on to see the magic of animated charts 😜.\n\n\n\n4.3.1 Working with gganimate package\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\nBuilding the animated bubble plot\nIn the following chart:\n\ntransition_time() is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\n\nShow the code\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n4.3.2 Working with plotly() package\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\nIn the following graph, ggplotly() is used to convert the ggplot2 graph into an animated object.\nggplotly(gg)\n\n\nShow the code\ngg <- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') +\n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\nIn this next graph, we will use plot_ly() function to create the animated bubble plot.\n\n\nShow the code\nbp <- globalPop %>%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent, \n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          )\nbp"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3b.html#reference",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex3b.html#reference",
    "title": "Animated Statistical Graph with R",
    "section": "4.4 Reference",
    "text": "4.4 Reference\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels\n\n\n\\(**That's\\) \\(all\\) \\(folks!**\\)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex1.html",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex1.html",
    "title": "A Light Makeover of ggplots",
    "section": "",
    "text": "First published: 17-Apr-2023"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex1.html#learning-outcome",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex1.html#learning-outcome",
    "title": "A Light Makeover of ggplots",
    "section": "1.1 Learning Outcome",
    "text": "1.1 Learning Outcome\nWe will:\n\nuse the graphic layers of ggplot2 to touch up various plots to make them more intuitive and appealing."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex1.html#getting-started",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex1.html#getting-started",
    "title": "A Light Makeover of ggplots",
    "section": "1.2 Getting Started",
    "text": "1.2 Getting Started\n\n1.2.1 Install and load the required r libraries\nLoad the tidyverse library.\n\n\nShow the code\npacman::p_load(tidyverse)\n\n\n\n\n1.2.2 Import the data\nWe will be using the same exam scores data-set that was featured in my Hands-On Ex 1.\n\n\nShow the code\nexam_data <- read_csv('data/Exam_data.csv', show_col_types = FALSE )"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex1.html#candidates-for-makeover",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex1.html#candidates-for-makeover",
    "title": "A Light Makeover of ggplots",
    "section": "1.3 Candidates for Makeover",
    "text": "1.3 Candidates for Makeover\n\n1.3.1 Working with theme\nWe can use the theme() function to change the colors of the plot panel background of the following plot to light blue and the color of grid lines to white. We will also include the title and subtitle to make the plot more meaningful.\n\nBeforeAfter\n\n\n\n\nShow the code\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  ylab('Count') +\n  theme_minimal() + \n  coord_flip()\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  ylab('Count') +\n  theme_minimal() + \n  coord_flip() +\n  \n  theme(\n    panel.background = element_rect(fill = \"lightblue\", colour = \"lightblue\"),\n    panel.grid.major = element_line(size = 0.75, linetype = 'solid', colour = \"white\"), \n    panel.grid.minor = element_line(size = 0.25, linetype = 'solid', colour = \"white\")\n      \n  ) +\n  \n  labs(title = \"Chinese Students Formed The Bulk Of The Cohort\",\n       subtitle = \"This was followed by Malay and Indian students\")\n\n\n\n\n\n\n\n\n\n\n1.3.2 Sort and label the columns in a chart\nFor the column chart displayed below, we have to address the following criticisms:\n\ny-axis title is not clear (i.e. count)\nTo support effective comparison, the bars should be sorted by their respective frequencies.\nFor static graph, frequency values should be added to provide addition information.\n\nTo address the first comment, we use ylab() and theme() function to relabel and calibrate the position of the y-axis title. For the 2nd and 3rd comment, we first summarise the data-set using group_by() and summarise() function to get the count of pupils by race. Thereafter, we use the reorder() function to sort the columns and geom_text() function to display the count.\n\nBeforeAfter\n\n\n\n\nShow the code\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  ylim(0,220) \n\n\n\n\n\n\n\n\n\nShow the code\n# Group the data by Race and aggregate by pupil count\nsorted_data <- exam_data %>% group_by(RACE) %>% summarise(count=n()) \n\n# Plot the chart\nggplot(data = sorted_data, aes(x=reorder(RACE, -count),y=count)) +\n  ylim(0,220) +\n  geom_col() +\n  ylab('No. of\\nPupils') +\n  theme(axis.title.y = element_text(angle = 0, vjust = 0.5, hjust=1))+\n  xlab('Race') +\n  geom_text(aes(label = count), vjust = -0.5, size = 3.5) +\n  labs(title = \"Chinese Pupils Formed The Bulk Of The Cohort\",\n       subtitle = \"This was followed by Malay and Indian pupils\")\n\n\n\n\n\n\n\n\n\n\n1.3.3 Add mean and median lines on the histogram\nWe can use the geom_vline() function to add a computed mean and median line onto the chart.\n\nBeforeAfter\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins = 20)\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(MATHS, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=1) +\n  geom_vline(aes(xintercept=median(MATHS, na.rm=T)),\n             color=\"grey30\",\n             linetype=\"dashed\", \n             size=1) +\n            xlab('Maths Score') +\n            ylab('Count') +\n  annotate(\"label\", color = \"red\", x=mean(exam_data$MATHS, na.rm=T)+2, y=50,\n          label=paste(\"Mean: \", round(mean(exam_data$MATHS, na.rm=T), 1)),fill = \"white\") +\n  annotate(\"label\",color=\"grey30\", x=median(exam_data$MATHS, na.rm=T)+2, y=40,\n          label=paste(\"Median: \", round(median(exam_data$MATHS, na.rm=T), 1)),fill = \"white\") + \n  labs(title = \"The Median score for Maths exam was 74\",\n         subtitle = \"We have a small porpotion of pupils who scored less than 25 marks\")\n\n\n\n\n\n\n\n\n\n\n1.3.4 Make the basic histogram more informative\nThe histograms below are elegantly designed but not informative. This is because they only reveal the distribution of English scores by gender but without context such as the score distribution for all pupils.\nTo show the distribution of English scores for all pupils as the background, we can add another geom_histogram() layer for all pupils.\n\nBeforeAfter\n\n\n\n\nShow the code\nggplot(data=exam_data, aes(x = ENGLISH )) +\n  geom_histogram() +\n  facet_wrap(~ GENDER) +\n  guides(fill = FALSE) \n\n\n\n\n\n\n\n\n\nShow the code\nd <- exam_data\n\n#create a d_bg dataframe without the gender attribute\nd_bg <- d[, -3]  \n\nggplot(d, aes(x = ENGLISH, fill = GENDER)) +\n  geom_histogram(data = d_bg, fill = \"grey\", alpha = .5) +\n  geom_histogram(colour = \"black\") +\n  facet_wrap(~ GENDER) +\n  # guides = false removes the legend from the chart\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"light blue\")) +\n  guides(fill = FALSE) +  \n  theme_bw() +\n  labs(title = \"Female pupils scored higher marks than male pupils for English\",\n         subtitle = \"Their score distn covered the overall score distn for all pupuls on the right side fo the chart\")\n\n\n\n\n\n\n\n\n\n\n1.3.5 Dividing a chart into 4 quadrants\nWe can use geom_hline() and geom_vline() to divide the chart into equal quadrants (see After(1)). At the same time, we can use the coord_cartesian() function to adjust the limits of the coordinate system for a plot to only display the data that falls within those limits.\nIn After (2), I included a regression line and swtich the background to white (using theme_minimal()) to make the relationship between English and Math scores more prominent.\n\nBeforeAfter (1)After (2)\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(20,99))\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  geom_hline(yintercept=50,\n             linetype=\"dashed\",\n             color=\"grey60\",\n             size=1) + \n  geom_vline(xintercept=50, \n             linetype=\"dashed\",\n             color=\"grey60\",\n             size=1) +\n  labs(title = \"Pupils who did well in English tend to excel in Math as well\",\n         subtitle = \"There is a positive correlation between English and Math scores\") \n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  geom_smooth(method=lm,linewidth=1.0)  +\n  labs(title = \"Pupils who did well in English tend to excel in Math as well\",\n         subtitle = \"There is a positive correlation between English and Math scores\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\\(**That's\\) \\(all\\) \\(folks!**\\)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics and Applications",
    "section": "",
    "text": "I am a student taking a post-grad analytics programme. Welcome to my ISSS608 Visual Analytics and Applications site! 😊\nThis site is a portfolio of my learning and accomplishments in the course. It showcases the exercises and projects I have completed and the skills I have acquired from the course."
  },
  {
    "objectID": "Tableau/1_Superstore.html",
    "href": "Tableau/1_Superstore.html",
    "title": "Superstore Annual Sales and Profit",
    "section": "",
    "text": "This was the first dashboard we developed in class. It marks the start of our fascinating journey into the world of data visualisation using Tableau."
  },
  {
    "objectID": "Tableau/2_SuperStore_Story.html",
    "href": "Tableau/2_SuperStore_Story.html",
    "title": "The Superstore Story",
    "section": "",
    "text": "I created this storyboard after going through the online tutorial on Tableau’s website👻. It’s refreshing to learn some of the capabilities of the visualisation tool and the workflow of creating a data story"
  }
]